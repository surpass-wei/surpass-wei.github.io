<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>正确的在onUnload事件中发起请求</title>
    <link href="/2021/07/12/%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%9C%A8unload%E4%BA%8B%E4%BB%B6%E4%B8%AD%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82/"/>
    <url>/2021/07/12/%E6%AD%A3%E7%A1%AE%E7%9A%84%E5%9C%A8unload%E4%BA%8B%E4%BB%B6%E4%B8%AD%E5%8F%91%E8%B5%B7%E8%AF%B7%E6%B1%82/</url>
    
    <content type="html"><![CDATA[<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在<code>unload</code>与<code>beforeunload</code>事件中我们应当使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/sendBeacon">Navigator.sendBeacon</a>函数来进行请求的发送，以避免以下问题：</p><ol><li>异步请求发送很可能失败</li><li>同步请求导致了页面卸载被延迟</li></ol><p>同时，我们应当做兼容性检查，如果浏览器不支持<code>sendBeacon</code>时，可采用同步请求的方式处理</p><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><blockquote><p>参数是将要发送的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/TypedArray"><code>ArrayBufferView</code></a> 或 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob"><code>Blob</code></a>, <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString"><code>DOMString</code></a> 或者 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/FormData"><code>FormData</code></a> 类型的数据。</p></blockquote><h3 id="JSON参数示例"><a href="#JSON参数示例" class="headerlink" title="JSON参数示例"></a>JSON参数示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> data = <span class="hljs-keyword">new</span> Blob([<span class="hljs-built_in">JSON</span>.stringify(jsonObj)], &#123;<br>  <span class="hljs-attr">type</span>: <span class="hljs-string">&#x27;application/json; charset=UTF-8&#x27;</span>,<br>&#125;);<br><br>navigator.sendBeacon(requestUrl, data);<br></code></pre></td></tr></table></figure><h3 id="FormData示例"><a href="#FormData示例" class="headerlink" title="FormData示例"></a>FormData示例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> data = <span class="hljs-keyword">new</span> FormData();<br>data.append(<span class="hljs-string">&#x27;username&#x27;</span>, <span class="hljs-string">&#x27;surwei&#x27;</span>);<br>data.append(<span class="hljs-string">&#x27;age&#x27;</span>, <span class="hljs-string">&#x27;26&#x27;</span>);<br><br>navigator.sendBeacon(requestUrl, data);<br></code></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="如何设置header？"><a href="#如何设置header？" class="headerlink" title="如何设置header？"></a>如何设置header？</h3><p>暂未找到设置header的方法，目前的处理是，将token作为参数传递到后台，由后台单独处理</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Navigator/sendBeacon">Navigator.sendBeacon()</a></p><p><a href="https://stackoverflow.com/questions/40523469/navigator-sendbeacon-to-pass-header-information">Navigator.sendBeacon() to pass header information</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>uni-app</tag>
      
      <tag>解决方案</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>让自定义注解支持EL表达式解析方法参数</title>
    <link href="/2021/04/13/%E8%AE%A9%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/"/>
    <url>/2021/04/13/%E8%AE%A9%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3%E6%94%AF%E6%8C%81EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E8%A7%A3%E6%9E%90%E6%96%B9%E6%B3%95%E5%8F%82%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="核心：EL表达式解析器"><a href="#核心：EL表达式解析器" class="headerlink" title="核心：EL表达式解析器"></a>核心：EL表达式解析器</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.aspectj.lang.JoinPoint;<br><span class="hljs-keyword">import</span> org.aspectj.lang.reflect.MethodSignature;<br><span class="hljs-keyword">import</span> org.springframework.core.LocalVariableTableParameterNameDiscoverer;<br><span class="hljs-keyword">import</span> org.springframework.expression.EvaluationContext;<br><span class="hljs-keyword">import</span> org.springframework.expression.ExpressionParser;<br><span class="hljs-keyword">import</span> org.springframework.expression.spel.standard.SpelExpressionParser;<br><span class="hljs-keyword">import</span> org.springframework.expression.spel.support.StandardEvaluationContext;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 用于Method自定义注解的的EL表达式解析器</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Created by surpass.wei@gmail.com on 2021/4/8.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AnnotationElParser</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> ExpressionParser spelExpressionParser = <span class="hljs-keyword">new</span> SpelExpressionParser();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> LocalVariableTableParameterNameDiscoverer discoverer = <span class="hljs-keyword">new</span> LocalVariableTableParameterNameDiscoverer();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * EL表达式解析</span><br><span class="hljs-comment">     *</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> clazz     返回值类型</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> joinPoint 切面连接点</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@param</span> elStr     EL表达式</span><br><span class="hljs-comment">     * <span class="hljs-doctag">@return</span> 解析结果</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; <span class="hljs-function">T <span class="hljs-title">parse</span><span class="hljs-params">(Class&lt;T&gt; clazz, JoinPoint joinPoint, String elStr)</span> </span>&#123;<br>        Object[] args = joinPoint.getArgs();<br>        String[] params = discoverer.getParameterNames(((MethodSignature) joinPoint.getSignature()).getMethod());<br>        EvaluationContext context = <span class="hljs-keyword">new</span> StandardEvaluationContext();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> len = <span class="hljs-number">0</span>; len &lt; (params != <span class="hljs-keyword">null</span> ? params.length : <span class="hljs-number">0</span>); len++) &#123;<br>            context.setVariable(params[len], args[len]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> spelExpressionParser.parseExpression(elStr).getValue(context, clazz);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="使用案例"><a href="#使用案例" class="headerlink" title="使用案例"></a>使用案例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">String name = AnnotationElParser.parse(String.class, joinPoint, <span class="hljs-string">&quot;#user.name&quot;</span>);<br>ArrayList&lt;String&gt; imgList = AnnotationElParser.parse(ArrayList.class, joinPoint, <span class="hljs-string">&quot;#imgList&quot;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【uni-app】从H5唤起APP</title>
    <link href="/2021/01/28/%E3%80%90uni-app%E3%80%91%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%96%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E5%94%A4%E8%B5%B7APP/"/>
    <url>/2021/01/28/%E3%80%90uni-app%E3%80%91%E4%BB%8E%E6%B5%8F%E8%A7%88%E5%99%A8%E6%88%96%E5%85%B6%E4%BB%96%E5%BA%94%E7%94%A8%E5%94%A4%E8%B5%B7APP/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在H5页面有个按钮，点击能够在手机浏览器/微信中直接跳转到对应的APP的具体页面，如果未安装对应的APP，则进行提示下载或在应用商店打开该应用下载页。也就是我们常见的“在APP中打开”功能。</p><p>这个功能在实现上主要分为两种场景，<code>从普通浏览器唤醒</code>以及<code>从微信唤醒</code>。这两个场景又分为了IOS端和安卓端，因此，实现的方式也分为很多种，譬如，schemes/Universal Link（通用链接）/应用宝等。</p><p>首先说下普通浏览器，不考虑个别浏览器屏蔽Schemes等情况，采用Schemes是最直接有效的方式，但是这种方式也存在一种问题，就是无法准确判断用户是否已经安装了想要打开的APP。对于这个问题，普遍的解决方式是当用户点了“在APP中打开”按钮后，如果数秒内当前页面的显示状态没有发生变化，则提示用户进行下载或前往应用商店。</p><p>然后是微信。微信就比较妖了，它禁了Schemes，想从微信唤起APP，目前有这么几种方案：</p><ol><li>IOS下通过Universal Link（通用链接），网上很多说也被微信禁了，但是我亲测是可以的，版本：<code>IOS 14.2</code> <code> 微信 7.0.20</code></li><li>接入应用宝（安卓依靠应用宝唤起，IOS只能跳转到app store）</li><li>提示用户在浏览器中打开（间接）</li><li>做腾讯的干儿子（即被微信列入不屏蔽schemes的对象中，可能不？）</li><li>采用微信开放标签</li></ol><p>很显然，方案5是最合适的，后文也是介绍的这种方式</p><blockquote><p>一些资料</p><p><a href="https://www.jianshu.com/p/0ead88409212">iOS H5打开App(通用链接)</a></p><p><a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html">微信开放标签文档</a></p></blockquote><h2 id="普通浏览器（采用Schemes方式）"><a href="#普通浏览器（采用Schemes方式）" class="headerlink" title="普通浏览器（采用Schemes方式）"></a>普通浏览器（采用Schemes方式）</h2><h3 id="注册Schemes"><a href="#注册Schemes" class="headerlink" title="注册Schemes"></a>注册Schemes</h3><p>Manifest.json视图 》App常用其他设置 》分别配置Android设置和IOS设置下的UrlSchemes参数 </p><p>坑：在配置视图中，配置IOS的UrlSchemes存在问题，需要按照 <a href="https://ask.dcloud.net.cn/article/64">文档</a> 在源码视图中配置（uniapp无形的坑真是的有点多，各方面都不够严谨）</p><p>代码示例：</p><h4 id="安卓"><a href="#安卓" class="headerlink" title="安卓"></a>安卓</h4><p>在manifest.json的”app-plus”-&gt;”distribute”-&gt;”android”节点下添加schemes数据:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;schemes&quot;</span> : <span class="hljs-string">&quot;your_url_schemes&quot;</span><br></code></pre></td></tr></table></figure><h4 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h4><p>在manifest.json的”app-plus”-&gt;”distribute”-&gt;”ios”节点下添加urltypes数据:</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-string">&quot;urltypes&quot;</span>: [&#123;<br>                <span class="hljs-attr">&quot;urlidentifier&quot;</span>: <span class="hljs-string">&quot;xxx.xxx&quot;</span>,<span class="hljs-comment">//一般为域名倒写，例如 baidu.com</span><br>                <span class="hljs-attr">&quot;urlschemes&quot;</span>: [<span class="hljs-string">&quot;your_url_schemes&quot;</span>]<br>&#125;]<br></code></pre></td></tr></table></figure><h3 id="检验"><a href="#检验" class="headerlink" title="检验"></a>检验</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;your_url_schemes://params&quot;</span>&gt;</span>打开APP<span class="hljs-tag">&lt;<span class="hljs-name">a</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>/&gt;</span><br></code></pre></td></tr></table></figure><p>或安卓下触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> ifr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&quot;iframe&quot;</span>);<br>ifr.src = <span class="hljs-string">&quot;your_url_schemes://params&quot;</span>;<br>ifr.style.display = <span class="hljs-string">&quot;none&quot;</span>;<br><span class="hljs-built_in">document</span>.body.appendChild(ifr);<br></code></pre></td></tr></table></figure><p>或IOS下触发</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">window</span>.location = <span class="hljs-string">&quot;your_url_schemes://params&quot;</span><br></code></pre></td></tr></table></figure><h3 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h3><p>监听页面显示状态变化，用以处理定时器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">&quot;visibilitychange&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">if</span> (that.timer) &#123;<br>    that.opening = <span class="hljs-literal">false</span><br>    <span class="hljs-built_in">clearTimeout</span>(that.timer)<br>  &#125;<br>&#125;, <span class="hljs-literal">false</span>);<br></code></pre></td></tr></table></figure><p>唤起APP点击方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-function"><span class="hljs-title">browserOpenApp</span>(<span class="hljs-params"></span>)</span> &#123;<br>  <span class="hljs-keyword">let</span> that = <span class="hljs-built_in">this</span><br>  that.opening = <span class="hljs-literal">true</span><br>  <span class="hljs-keyword">if</span> (that.isAndroid()) &#123; <span class="hljs-comment">//  安卓处理</span><br>    <span class="hljs-keyword">let</span> ifr = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">&#x27;iframe&#x27;</span>);<br>    ifr.src = <span class="hljs-string">&quot;your_url_schemes://params&quot;</span>;<br>    ifr.style.display = <span class="hljs-string">&#x27;none&#x27;</span>;<br>    <span class="hljs-built_in">document</span>.body.appendChild(ifr);<br>    that.timer = <span class="hljs-built_in">window</span>.setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;  <span class="hljs-comment">//  未安装的情况</span><br>      that.opening = <span class="hljs-literal">false</span><br>      <span class="hljs-built_in">document</span>.body.removeChild(ifr);<br>      <span class="hljs-comment">//  提示下载</span><br>      <span class="hljs-keyword">let</span> r = confirm(<span class="hljs-string">&quot;未安装APP? 是否下载&quot;</span>)<br>      <span class="hljs-keyword">if</span> (r) &#123;<br>        <span class="hljs-built_in">window</span>.location = that.androidDownloadUrl<br>      &#125;<br>    &#125;, <span class="hljs-number">5000</span>)<br>  &#125; <span class="hljs-keyword">else</span> &#123;  <span class="hljs-comment">//  IOS处理</span><br>    <span class="hljs-built_in">window</span>.location = <span class="hljs-string">&quot;your_url_schemes://params&quot;</span><br>    that.timer = <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">//  未安装的情况</span><br>      that.opening = <span class="hljs-literal">false</span><br>      <span class="hljs-comment">//  跳转app store</span><br>      <span class="hljs-keyword">let</span> r = confirm(<span class="hljs-string">&quot;未安装APP? 是否去App store查看&quot;</span>)<br>      <span class="hljs-keyword">if</span> (r) &#123;<br>        <span class="hljs-built_in">window</span>.location = <span class="hljs-string">&#x27;https://apps.apple.com/cn/app/idxxxxxxxxxx&#x27;</span><br>      &#125;<br>    &#125;, <span class="hljs-number">5000</span>);<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>参考文档：</p><p><a href="https://ask.dcloud.net.cn/question/114765">【报Bug】HBuilderX配置IOS UrlSchemes的提示存在问题，易误导</a></p><p><a href="https://ask.dcloud.net.cn/article/409">Android平台设置UrlSchemes，实现被第三方应用调用</a></p><p><a href="https://ask.dcloud.net.cn/article/64">iOS平台设置UrlSchemes，实现被第三方应用调用</a></p></blockquote><h2 id="微信（开放标签方式）"><a href="#微信（开放标签方式）" class="headerlink" title="微信（开放标签方式）"></a>微信（开放标签方式）</h2><p>按<a href="https://developers.weixin.qq.com/doc/offiaccount/OA_Web_Apps/Wechat_Open_Tag.html">微信开放标签文档</a>操作就可以了，值得注意的点有以下：</p><ol><li>h5网页必须以配置的<code>JS接口安全域名</code>访问，否则无法正常显示开放标签按钮</li><li>微信的JS-SDK只有在H5环境下才能正常加载，在小程序、APP环境下会报错</li><li><code>&lt;wx-open-launch-app</code>标签内的<code>&lt;template&gt;</code>标签要用<code>&lt;script type=&quot;text/wxtag-template&quot;&gt;</code>代替</li></ol><h2 id="参数处理"><a href="#参数处理" class="headerlink" title="参数处理"></a>参数处理</h2><h3 id="参数的传递"><a href="#参数的传递" class="headerlink" title="参数的传递"></a>参数的传递</h3><p>普通浏览器schemes url中 <code>//</code>后的即为参数内容，例如<code>your_url_schemes://params</code>的参数内容为<code>params</code></p><p>微信开放标签中，<code>wx-open-launch-app</code>标签的extinfo属性即为参数内容</p><h3 id="参数的获取"><a href="#参数的获取" class="headerlink" title="参数的获取"></a>参数的获取</h3><p><code>plus.runtime.arguments</code>即为当前的参数内容，但是有以下几个点需要处理：</p><ol><li>在获取<code>plus.runtime.arguments</code>后，需要将<code>plus.runtime.arguments</code>置为空，否则一直能获取到</li><li>不同浏览器或系统获取到的参数可能会包含前缀<code>your_url_schemes://</code>，需要处理</li><li>IOS下会对参数进行编码，因此，在获取后，需要用<code>decodeURIComponent</code>方法进行解码</li><li>IOS下可能有获取参数异常的问题（获取的为上一个变化的值），需要用setTimeout(function,0)的方式来解决</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><p>在<code>App.vue</code> <code> onshow</code>钩子函数中添加：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 跳转页面(需要在setTimeout中,否则IOS会出现获取的plus.runtime.arguments是上一个赋值给plus.runtime.arguments的值,而不是当前传入的plus.runtime.arguments)</span><br><span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> appOpenParam = plus.runtime.arguments<br>  plus.runtime.arguments = <span class="hljs-literal">null</span>;<br>  plus.runtime.arguments = <span class="hljs-string">&quot;&quot;</span>;<br>  appOpenParam = appOpenParam.replace(<span class="hljs-string">&quot;your_url_schemes://&quot;</span>,<span class="hljs-string">&#x27;&#x27;</span>)<br>  appOpenParam = <span class="hljs-built_in">decodeURIComponent</span>(appOpenParam)<br>  <span class="hljs-keyword">if</span> (appOpenParam &amp;&amp; appOpenParam.trim().length&gt;<span class="hljs-number">0</span>) &#123;<br>    <span class="hljs-keyword">let</span> appOpenParamObj = <span class="hljs-built_in">JSON</span>.parse(appOpenParam)<br>    <span class="hljs-keyword">if</span> (appOpenParamObj.openPath) &#123;<br>      uni.navigateTo(&#123;<br>        <span class="hljs-attr">url</span>: appOpenParamObj.openPath<br>      &#125;);<br>    &#125;<br>  &#125;<br>&#125;, <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>uni-app</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pagehelper在全文检索sql下排序报错的问题</title>
    <link href="/2020/09/22/pagehelper%E5%9C%A8%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2sql%E4%B8%8B%E6%8E%92%E5%BA%8F%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2020/09/22/pagehelper%E5%9C%A8%E5%85%A8%E6%96%87%E6%A3%80%E7%B4%A2sql%E4%B8%8B%E6%8E%92%E5%BA%8F%E6%8A%A5%E9%94%99%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<p>当sql中用到了全文索引做检索时且用pagehelp添加了排序时，发现后端会报一堆<code>JSQLParserException</code>，虽然能正常获取到查询结果，但是后端一堆的error日志看着也是非常难受，所以试着查找下问题的解决方案，具体的错误信息如下：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">net<span class="hljs-selector-class">.sf</span><span class="hljs-selector-class">.jsqlparser</span><span class="hljs-selector-class">.JSQLParserException</span><br>    at....「省略」<br>    Caused by: net<span class="hljs-selector-class">.sf</span><span class="hljs-selector-class">.jsqlparser</span><span class="hljs-selector-class">.parser</span><span class="hljs-selector-class">.ParseException</span>: Encountered <span class="hljs-string">&quot; &lt;S_IDENTIFIER&gt; &quot;</span>against <span class="hljs-string">&quot;&quot;</span> at line <span class="hljs-number">12</span>, column <span class="hljs-number">9</span>.<br>Was expecting one of:<br>    &lt;EOF&gt; <br>    <span class="hljs-string">&quot;AND&quot;</span> ...<br></code></pre></td></tr></table></figure><p>根据网上的资料升级<code>com.github.jsqlparser.jsqlparser</code>到最新<code>3.2</code>的版本后，报了新的错误：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">net<span class="hljs-selector-class">.sf</span><span class="hljs-selector-class">.jsqlparser</span><span class="hljs-selector-class">.JSQLParserException</span><br>    at net<span class="hljs-selector-class">.sf</span><span class="hljs-selector-class">.jsqlparser</span>.....「省略」<br>    Caused by: net<span class="hljs-selector-class">.sf</span><span class="hljs-selector-class">.jsqlparser</span><span class="hljs-selector-class">.parser</span><span class="hljs-selector-class">.ParseException</span>: Encountered unexpected token: <span class="hljs-string">&quot;MATCH&quot;</span> <span class="hljs-string">&quot;MATCH&quot;</span><br>    at line <span class="hljs-number">11</span>, column <span class="hljs-number">13</span>.<br></code></pre></td></tr></table></figure><p>最后，取消<code>jsqlparser</code>的升级,直接将<code>com.github.pagehelper.pagehelper-spring-boot-starter</code>的版本从<code>1.2.5</code>升级到<code>1.2.13</code>后，不再报错。</p>]]></content>
    
    
    
    <tags>
      
      <tag>问题解决</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mysql与oracle的一些优化技巧</title>
    <link href="/2020/03/26/mysql%E4%B8%8Eoracle%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/"/>
    <url>/2020/03/26/mysql%E4%B8%8Eoracle%E7%9A%84%E4%B8%80%E4%BA%9B%E4%BC%98%E5%8C%96%E6%8A%80%E5%B7%A7/</url>
    
    <content type="html"><![CDATA[<h1 id="选取最适用的字段属性"><a href="#选取最适用的字段属性" class="headerlink" title="选取最适用的字段属性"></a>选取最适用的字段属性</h1><p>MySQL可以很好的支持大数据量的存取，但是一般说来，数据库中的表越小，在它上面执行的查询也就会越快。因此，在创建表的时候，为了获得更好的性能，我们可以将表中字段的宽度设得尽可能小。<br>例如，在定义邮政编码这个字段时，如果将其设置为CHAR(255),显然给数据库增加了不必要的空间，甚至使用VARCHAR这种类型也是多余的，因为CHAR(6)就可以很好的完成任务了。同样的，如果可以的话，我们应该使用MEDIUMINT而不是BIGIN来定义整型字段。<br>另外一个提高效率的方法是在可能的情况下，应该尽量把字段设置为NOTNULL，这样在将来执行查询的时候，数据库不用去比较NULL值。<br>对于某些文本字段，例如“省份”或者“性别”，我们可以将它们定义为ENUM类型。因为在MySQL中，ENUM类型被当作数值型数据来处理，而数值型数据被处理起来的速度要比文本类型快得多。这样，我们又可以提高数据库的性能。</p><h1 id="使用连接（JOIN）来代替子查询-Sub-Queries"><a href="#使用连接（JOIN）来代替子查询-Sub-Queries" class="headerlink" title="使用连接（JOIN）来代替子查询(Sub-Queries)"></a>使用连接（JOIN）来代替子查询(Sub-Queries)</h1><p>MySQL从4.1开始支持SQL的子查询。这个技术可以使用SELECT语句来创建一个单列的查询结果，然后把这个结果作为过滤条件用在另一个查询中。例如，我们要将客户基本信息表中没有任何订单的客户删除掉，就可以利用子查询先从销售信息表中将所有发出订单的客户ID取出来，然后将结果传递给主查询，如下所示：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> customerinfo <span class="hljs-keyword">WHERE</span> CustomerID <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">in</span>(<span class="hljs-keyword">SELECT</span> CustomerID <span class="hljs-keyword">FROM</span> salesinfo)<br></code></pre></td></tr></table></figure><p>使用子查询可以一次性的完成很多逻辑上需要多个步骤才能完成的SQL操作，同时也可以避免事务或者表锁死，并且写起来也很容易。但是，有些情况下，子查询可以被更有效率的连接（JOIN）..替代。例如，假设我们要将所有没有订单记录的用户取出来，可以用下面这个查询完成：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> customerinfo <span class="hljs-keyword">WHERE</span> Customer ID <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">in</span> (<span class="hljs-keyword">SELECT</span> CustomerID <span class="hljs-keyword">FROM</span> salesinfo)<br></code></pre></td></tr></table></figure><p>如果使用连接（JOIN）..来完成这个查询工作，速度将会快很多。尤其是当salesinfo表中对CustomerID建有索引的话，性能将会更好，查询如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> customerinfo <span class="hljs-keyword">LEFT</span> <span class="hljs-keyword">JOIN</span> salesinfo <span class="hljs-keyword">ON</span> customerinfo.CustomerID <span class="hljs-operator">=</span> salesinfo.CustomerID <span class="hljs-keyword">WHERE</span> salesinfo.CustomerID <span class="hljs-keyword">IS</span> <span class="hljs-keyword">NULL</span><br></code></pre></td></tr></table></figure><p>连接（JOIN）..之所以更有效率一些，是因为MySQL不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。</p><h1 id="使用联合-UNION-来代替手动创建的临时表"><a href="#使用联合-UNION-来代替手动创建的临时表" class="headerlink" title="使用联合(UNION)来代替手动创建的临时表"></a>使用联合(UNION)来代替手动创建的临时表</h1><p>MySQL从4.0的版本开始支持union查询，它可以把需要使用临时表的两条或更多的select查询合并的一个查询中。在客户端的查询会话结束的时候，临时表会被自动删除，从而保证数据库整齐、高效。使用union来创建查询的时候，我们只需要用UNION作为关键字把多个select语句连接起来就可以了，要注意的是所有select语句中的字段数目要想同。下面的例子就演示了一个使用UNION的查询。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> Name,Phone <span class="hljs-keyword">FROM</span> client<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> Name,BirthDate <span class="hljs-keyword">FROM</span> author<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> Name,Supplier <span class="hljs-keyword">FROM</span> product<br></code></pre></td></tr></table></figure><h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><p>尽管我们可以使用子查询（Sub-Queries）、连接（JOIN）和联合（UNION）来创建各种各样的查询，但不是所有的数据库操作都可以只用一条或少数几条SQL语句就可以完成的。更多的时候是需要用到一系列的语句来完成某种工作。但是在这种情况下，当这个语句块中的某一条语句运行出错的时候，整个语句块的操作就会变得不确定起来。设想一下，要把某个数据同时插入两个相关联的表中，可能会出现这样的情况：第一个表中成功更新后，数据库突然出现意外状况，造成第二个表中的操作没有完成，这样，就会造成数据的不完整，甚至会破坏数据库中的数据。要避免这种情况，就应该使用事务，它的作用是：要么语句块中每条语句都操作成功，要么都失败。换句话说，就是可以保持数据库中数据的一致性和完整性。事物以BEGIN关键字开始，COMMIT关键字结束。在这之间的一条SQL操作失败，那么，ROLLBACK命令就可以把数据库恢复到BEGIN开始之前的状态。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">BEGIN</span>;<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> salesinfo <span class="hljs-keyword">SET</span> CustomerID<span class="hljs-operator">=</span><span class="hljs-number">14</span>;<br>UPDATE inventory <span class="hljs-keyword">SET</span> Quantity<span class="hljs-operator">=</span><span class="hljs-number">11</span> <span class="hljs-keyword">WHERE</span> item<span class="hljs-operator">=</span><span class="hljs-string">&#x27;book&#x27;</span>;<br><span class="hljs-keyword">COMMIT</span>;<br></code></pre></td></tr></table></figure><p>事务的另一个重要作用是当多个用户同时使用相同的数据源时，它可以利用锁定数据库的方法来为用户提供一种安全的访问方式，这样可以保证用户的操作不被其它的用户所干扰。</p><h1 id="锁定表"><a href="#锁定表" class="headerlink" title="锁定表"></a>锁定表</h1><p>尽管事务是维护数据库完整性的一个非常好的方法，但却因为它的独占性，有时会影响数据库的性能，尤其是在很大的应用系统中。由于在事务执行的过程中，数据库将会被锁定，因此其它的用户请求只能暂时等待直到该事务结束。如果一个数据库系统只有少数几个用户来使用，事务造成的影响不会成为一个太大的问题；但假设有成千上万的用户同时访问一个数据库系统，例如访问一个电子商务网站，就会产生比较严重的响应延迟。<br>其实，有些情况下我们可以通过锁定表的方法来获得更好的性能。下面的例子就用锁定表的方法来完成前面一个例子中事务的功能。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">LOCK <span class="hljs-keyword">TABLE</span> inventory WRITE<br><span class="hljs-keyword">SELECT</span> Quantity <span class="hljs-keyword">FROM</span> inventory <span class="hljs-keyword">WHERE</span> Item<span class="hljs-operator">=</span><span class="hljs-string">&#x27;book&#x27;</span>;<br>...<br>UPDATE inventory <span class="hljs-keyword">SET</span> Quantity<span class="hljs-operator">=</span><span class="hljs-number">11</span> <span class="hljs-keyword">WHERE</span> Item<span class="hljs-operator">=</span><span class="hljs-string">&#x27;book&#x27;</span>;<br>UNLOCK TABLES<br></code></pre></td></tr></table></figure><p>这里，我们用一个<code>SELECT</code>语句取出初始数据，通过一些计算，用<code>UPDATE</code>语句将新值更新到表中。包含有<code>WRITE</code>关键字的<code>LOCKTABLE</code>语句可以保证在<code>UNLOCKTABLES</code>命令被执行之前，不会有其它的访问来对inventory进行插入、更新或者删除的操作。</p><h1 id="使用外键"><a href="#使用外键" class="headerlink" title="使用外键"></a>使用外键</h1><p>锁定表的方法可以维护数据的完整性，但是它却不能保证数据的关联性。这个时候我们就可以使用外键。<br>例如，外键可以保证每一条销售记录都指向某一个存在的客户。在这里，外键可以把customerinfo表中的CustomerID映射到salesinfo表中CustomerID，任何一条没有合法CustomerID的记录都不会被更新或插入到salesinfo中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> customerinfo( CustomerID <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,PRIMARYKEY(CustomerID)) TYPE <span class="hljs-operator">=</span> INNODB;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> salesinfo( SalesID <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,CustomerID <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>PRIMARYKEY(CustomerID,SalesID),<br>FOREIGNKEY(CustomerID) <span class="hljs-keyword">REFERENCES</span> customerinfo(CustomerID) <span class="hljs-keyword">ON</span> <span class="hljs-keyword">DELETE</span> CASCADE)TYPE <span class="hljs-operator">=</span> INNODB;<br></code></pre></td></tr></table></figure><p>注意例子中的参数<code>ON DELETE CASCADE</code>。该参数保证当customerinfo表中的一条客户记录被删除的时候，salesinfo表中所有与该客户相关的记录也会被自动删除。如果要在MySQL中使用外键，一定要记住在创建表的时候将表的类型定义为事务安全表<code>InnoDB</code>类型。该类型不是MySQL表的默认类型。定义的方法是在<code>CREATE TABLE</code>语句中加上<code>TYPE=INNODB</code>。如例中所示。</p><h1 id="使用索引"><a href="#使用索引" class="headerlink" title="使用索引"></a>使用索引</h1><p>索引是提高数据库性能的常用方法，它可以令数据库服务器以比没有索引快得多的速度检索特定的行，尤其是在查询语句当中包含有<code>MAX()</code>,<code>MIN()</code>和<code>ORDER BY</code>这些命令的时候，性能提高更为明显。<br>那该对哪些字段建立索引呢？<br>一般说来，索引应建立在那些将用于<code>JOIN</code>,<code>WHERE</code>判断和<code>ORDER BY</code>排序的字段上。<em>尽量不要对数据库中某个含有大量重复的值的字段建立索引</em>。对于一个ENUM类型的字段来说，出现大量重复值是很有可能的情况<br>例如customerinfo中的“province”..字段，在这样的字段上建立索引将不会有什么帮助；相反，还有可能降低数据库的性能。我们在创建表的时候可以同时创建合适的索引，也可以使用<code>ALTER TABLE</code>或<code>CREATE INDEX</code>在以后创建索引。此外，MySQL从版本3.23.23开始支持全文索引和搜索。全文索引在MySQL中是一个<code>FULL TEXT</code>类型索引，但仅能用于<code>MyISAM</code>类型的表。对于一个大的数据库，将数据装载到一个没有<code>FULL TEXT</code>索引的表中，然后再使用<code>ALTER TABLE</code>或<code>CREATE INDEX</code>创建索引，将是非常快的。但如果将数据装载到一个已经有FULLTEXT索引的表中，执行过程将会非常慢。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"># 查看索引<br><span class="hljs-keyword">SHOW</span> INDEX <span class="hljs-keyword">FROM</span> t_user;<br># 新建普通索引<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> INDEX index_name(<span class="hljs-keyword">column</span>);<br># 新建组合索引<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> INDEX index_name(column1,column2, column3);<br># 新建全文索引<br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> table_name <span class="hljs-keyword">ADD</span> FULLTEXT(<span class="hljs-keyword">column</span>);<br></code></pre></td></tr></table></figure><h1 id="优化的查询语句"><a href="#优化的查询语句" class="headerlink" title="优化的查询语句"></a>优化的查询语句</h1><p>绝大多数情况下，使用索引可以提高查询的速度，但如果SQL语句使用不恰当的话，索引将无法发挥它应有的作用。<br>下面是应该注意的几个方面。<br>首先，最好是在相同类型的字段间进行比较的操作。<br>在MySQL3.23版之前，这甚至是一个必须的条件。例如不能将一个建有索引的<code>INT</code>字段和<code>BIGINT</code>字段进行比较；但是作为特殊的情况，在<code>CHAR</code>类型的字段和<code>VARCHAR</code>类型字段的字段大小相同的时候，可以将它们进行比较。<br>其次，<em>在建有索引的字段上尽量不要使用函数进行操作</em>。<br>例如，在一个<code>DATE</code>类型的字段上使用<code>YEAE()</code>函数时，将会使索引不能发挥应有的作用。所以，下面的两个查询虽然返回的结果一样，但后者要比前者快得多。<br>第三，在搜索字符型字段时，我们有时会使用<code>LIKE</code>关键字和<code>通配符</code>，这种做法虽然简单，但却也是以牺牲系统性能为代价的。<br>例如下面的查询将会比较表中的每一条记录。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> books <span class="hljs-keyword">WHERE</span> name <span class="hljs-keyword">like</span> &quot;MySQL%&quot;<br></code></pre></td></tr></table></figure><p>但是如果换用下面的查询，返回的结果一样，但速度就要快上很多：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> books <span class="hljs-keyword">WHERE</span> name ＞<span class="hljs-operator">=</span> &quot;MySQL&quot; <span class="hljs-keyword">and</span> name ＜ &quot;MySQM&quot;<br></code></pre></td></tr></table></figure><p>最后，应该注意避免在查询中让MySQL进行自动类型转换，因为转换过程也会使索引变得不起作用。</p><h1 id="复合索引"><a href="#复合索引" class="headerlink" title="复合索引"></a>复合索引</h1><p>比如有一条语句是这样的：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> area<span class="hljs-operator">=</span><span class="hljs-string">&#x27;beijing&#x27;</span> <span class="hljs-keyword">and</span> age<span class="hljs-operator">=</span><span class="hljs-number">22</span>;<br></code></pre></td></tr></table></figure><p>如果我们是在area和age上分别创建单个索引的话，由于mysql查询每次只能使用一个索引，所以虽然这样已经相对不做索引时全表扫描提高了很多效率，但是如果在area、age两列上创建复合索引的话将带来更高的效率。如果我们创建了(area, age, salary)的复合索引，那么其实相当于创建了(area,age,salary)、(area,age)、(area)三个索引，这被称为最佳左前缀特性。因此我们在创建复合索引时应该将最常用作限制条件的列放在最左边，依次递减。另外，是建立（a,b）还是（b,a）呢？原则上，区分度高的在前面。</p><h1 id="索引不会包含有NULL值的列"><a href="#索引不会包含有NULL值的列" class="headerlink" title="索引不会包含有NULL值的列"></a>索引不会包含有NULL值的列</h1><p>只要列中包含有NULL值都将不会被包含在索引中，复合索引中只要有一列含有NULL值，那么这一列对于此复合索引就是无效的。所以我们在数据库设计时不要让字段的默认值为NULL。</p><h1 id="使用短索引"><a href="#使用短索引" class="headerlink" title="使用短索引"></a>使用短索引</h1><p>对串列进行索引，如果可能应该指定一个前缀长度。例如，如果有一个CHAR(255)的 列，如果在前10个或20个字符内，多数值是惟一的，那么就不要对整个列进行索引。短索引不仅可以提高查询速度而且可以节省磁盘空间和I/O操作。</p><h1 id="排序的索引问题"><a href="#排序的索引问题" class="headerlink" title="排序的索引问题"></a>排序的索引问题</h1><p><em>mysql查询只使用一个索引</em>，因此如果<code>WHERE</code>子句中已经使用了索引的话，那么<code>ORDER BY</code>中的列是不会使用索引的。因此数据库默认排序可以符合要求的情况下不要使用排序操作；尽量不要包含多个列的排序，如果需要最好给这些列创建复合索引。</p><h1 id="like语句操作"><a href="#like语句操作" class="headerlink" title="like语句操作"></a>like语句操作</h1><p>一般情况下不鼓励使用<code>like</code>操作，如果非使用不可，如何使用也是一个问题。like “%aaa%” 不会使用索引而like “aaa%”可以使用索引。</p><h1 id="不要在列上进行运算"><a href="#不要在列上进行运算" class="headerlink" title="不要在列上进行运算"></a>不要在列上进行运算</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> <span class="hljs-keyword">YEAR</span>(adddate)<span class="hljs-operator">&lt;</span><span class="hljs-number">2007</span>;<br></code></pre></td></tr></table></figure><p>将在每个行上进行运算，这将导致索引失效而进行全表扫描，因此我们可以改成</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> users <span class="hljs-keyword">where</span> adddate<span class="hljs-operator">&lt;</span>‘<span class="hljs-number">2007</span><span class="hljs-number">-01</span><span class="hljs-number">-01</span><span class="hljs-string">&#x27;;</span><br></code></pre></td></tr></table></figure><h1 id="不使用NOT-IN和-lt-gt-操作"><a href="#不使用NOT-IN和-lt-gt-操作" class="headerlink" title="不使用NOT IN和&lt;&gt;操作"></a>不使用NOT IN和&lt;&gt;操作</h1><p><code>NOT IN</code>和<code>&lt;&gt;</code>操作都不会使用索引将进行全表扫描。<code>NOT IN</code>可以<code>NOT EXISTS</code>代替，<code>id&lt;&gt;3</code>则可使用<code>id&gt;3 or id&lt; 3</code>来代替。</p><h1 id="查询优化"><a href="#查询优化" class="headerlink" title="查询优化"></a>查询优化</h1><p>对查询进行优化，要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引。</p><h1 id="避免在-where-子句中对字段进行-null-值判断"><a href="#避免在-where-子句中对字段进行-null-值判断" class="headerlink" title="避免在 where 子句中对字段进行 null 值判断"></a>避免在 where 子句中对字段进行 null 值判断</h1><p>应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-keyword">is</span> <span class="hljs-keyword">null</span><br></code></pre></td></tr></table></figure><p>最好不要给数据库留NULL，尽可能的使用 NOT NULL填充数据库.<br>备注、描述、评论之类的可以设置为 NULL，其他的，最好不要使用NULL。<br>不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是varchar这样的变长字段， null 不占用空间。<br>可以在num上设置默认值0，确保表中num列没有null值，然后这样查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-operator">=</span> <span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><h1 id="避免在-where-子句中使用-或-lt-gt-操作符"><a href="#避免在-where-子句中使用-或-lt-gt-操作符" class="headerlink" title="避免在 where 子句中使用 != 或 &lt;&gt; 操作符"></a>避免在 where 子句中使用 != 或 &lt;&gt; 操作符</h1><p>应尽量避免在 where 子句中使用 != 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描。</p><h1 id="尽量避免在-where-子句中使用-or-来连接条件"><a href="#尽量避免在-where-子句中使用-or-来连接条件" class="headerlink" title="尽量避免在 where 子句中使用 or 来连接条件"></a>尽量避免在 where 子句中使用 or 来连接条件</h1><p>应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num<span class="hljs-operator">=</span><span class="hljs-number">10</span> <span class="hljs-keyword">or</span> Name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><p>可以这样查询：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-operator">=</span> <span class="hljs-number">10</span><br><span class="hljs-keyword">union</span> <span class="hljs-keyword">all</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> Name <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;admin&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="in-和-not-in-也要慎用"><a href="#in-和-not-in-也要慎用" class="headerlink" title="in 和 not in 也要慎用"></a>in 和 not in 也要慎用</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-keyword">in</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br></code></pre></td></tr></table></figure><p>对于连续的数值，能用 between 就不要用 in 了：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-keyword">between</span> <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> <span class="hljs-number">3</span><br></code></pre></td></tr></table></figure><p>很多时候用 exists 代替 in 是一个好的选择：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> num <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> num <span class="hljs-keyword">in</span>(<span class="hljs-keyword">select</span> num <span class="hljs-keyword">from</span> b)<br></code></pre></td></tr></table></figure><p>用下面的语句替换：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> num <span class="hljs-keyword">from</span> a <span class="hljs-keyword">where</span> <span class="hljs-keyword">exists</span>(<span class="hljs-keyword">select</span> <span class="hljs-number">1</span> <span class="hljs-keyword">from</span> b <span class="hljs-keyword">where</span> num<span class="hljs-operator">=</span>a.num)<br></code></pre></td></tr></table></figure><h1 id="强制查询使用索引"><a href="#强制查询使用索引" class="headerlink" title="强制查询使用索引"></a>强制查询使用索引</h1><p>如果在 where 子句中使用参数，也会导致全表扫描。因为SQL只有在运行时才会解析局部变量，但优化程序不能将访问计划的选择推迟到运行时；它必须在编译时进行选择。然 而，如果在编译时建立访问计划，变量的值还是未知的，因而无法作为索引选择的输入项。如下面语句将进行全表扫描：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-operator">=</span> <span class="hljs-variable">@num</span><br></code></pre></td></tr></table></figure><p>可以改为强制查询使用索引：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">with</span>(index(索引名)) <span class="hljs-keyword">where</span> num <span class="hljs-operator">=</span> <span class="hljs-variable">@num</span><br></code></pre></td></tr></table></figure><h1 id="尽量避免在-where-子句中对字段进行表达式操作"><a href="#尽量避免在-where-子句中对字段进行表达式操作" class="headerlink" title="尽量避免在 where 子句中对字段进行表达式操作"></a>尽量避免在 where 子句中对字段进行表达式操作</h1><p>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num<span class="hljs-operator">/</span><span class="hljs-number">2</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><p>应改为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> num <span class="hljs-operator">=</span> <span class="hljs-number">100</span><span class="hljs-operator">*</span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h1 id="尽量避免在where子句中对字段进行函数操作"><a href="#尽量避免在where子句中对字段进行函数操作" class="headerlink" title="尽量避免在where子句中对字段进行函数操作"></a>尽量避免在where子句中对字段进行函数操作</h1><p>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> <span class="hljs-built_in">substring</span>(name,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>) <span class="hljs-operator">=</span> ’abc’       <span class="hljs-operator">-</span>–name以abc开头的id<br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> datediff(<span class="hljs-keyword">day</span>,createdate,’<span class="hljs-number">2005</span><span class="hljs-number">-11</span><span class="hljs-number">-30</span>′) <span class="hljs-operator">=</span> <span class="hljs-number">0</span>    <span class="hljs-operator">-</span>–‘<span class="hljs-number">2005</span><span class="hljs-number">-11</span><span class="hljs-number">-30</span>’    <span class="hljs-comment">--生成的id</span><br></code></pre></td></tr></table></figure><p>应改为:</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> name <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;abc%&#x27;</span><br><span class="hljs-keyword">select</span> id <span class="hljs-keyword">from</span> t <span class="hljs-keyword">where</span> createdate <span class="hljs-operator">&gt;=</span> <span class="hljs-string">&#x27;2005-11-30&#x27;</span> <span class="hljs-keyword">and</span> createdate <span class="hljs-operator">&lt;</span> <span class="hljs-string">&#x27;2005-12-1&#x27;</span><br></code></pre></td></tr></table></figure><h1 id="不要在-where-子句中的“-”左边进行函数、算术运算或其他表达式运算"><a href="#不要在-where-子句中的“-”左边进行函数、算术运算或其他表达式运算" class="headerlink" title="不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算"></a>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算</h1><p>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。</p><h1 id="在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。"><a href="#在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。" class="headerlink" title="在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。"></a>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。</h1><h1 id="不要Update全部字段"><a href="#不要Update全部字段" class="headerlink" title="不要Update全部字段"></a>不要Update全部字段</h1><p>Update 语句，如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志。</p><h1 id="先分页再JOIN"><a href="#先分页再JOIN" class="headerlink" title="先分页再JOIN"></a>先分页再JOIN</h1><p>对于多张大数据量（这里几百条就算大了）的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差。</p><h1 id="杜绝不带任何条件的count"><a href="#杜绝不带任何条件的count" class="headerlink" title="杜绝不带任何条件的count"></a>杜绝不带任何条件的count</h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span>；<br></code></pre></td></tr></table></figure><p>这样不带任何条件的count会引起全表扫描，并且没有任何业务意义，是一定要杜绝的。</p><h1 id="索引并不是越多越好"><a href="#索引并不是越多越好" class="headerlink" title="索引并不是越多越好"></a>索引并不是越多越好</h1><p>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有必要</p><h1 id="避免更新-clustered-索引数据列"><a href="#避免更新-clustered-索引数据列" class="headerlink" title="避免更新 clustered 索引数据列"></a>避免更新 clustered 索引数据列</h1><p>应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，一旦该列值改变将导致整个表记录的顺序的调整，会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引。</p><h1 id="尽量使用数字型字段"><a href="#尽量使用数字型字段" class="headerlink" title="尽量使用数字型字段"></a>尽量使用数字型字段</h1><p>尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。这是因为引擎在处理查询和连 接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了</p><h1 id="尽可能的使用-varchar-nvarchar-代替-char-nchar"><a href="#尽可能的使用-varchar-nvarchar-代替-char-nchar" class="headerlink" title="尽可能的使用 varchar/nvarchar 代替 char/nchar"></a>尽可能的使用 varchar/nvarchar 代替 char/nchar</h1><p>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。</p><h1 id="避免频繁创建和删除临时表"><a href="#避免频繁创建和删除临时表" class="headerlink" title="避免频繁创建和删除临时表"></a>避免频繁创建和删除临时表</h1><p>避免频繁创建和删除临时表，以减少系统表资源的消耗。临时表并不是不可使用，适当地使用它们可以使某些例程更有效，例如，当需要重复引用大型表或常用表中的某个数据集时。但是，对于一次性事件， 最好使用导出表。</p><h1 id="可以使用-select-into-代替-create-table"><a href="#可以使用-select-into-代替-create-table" class="headerlink" title="可以使用 select into 代替 create table"></a>可以使用 select into 代替 create table</h1><p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p><h1 id="将所有的临时表显式删除"><a href="#将所有的临时表显式删除" class="headerlink" title="将所有的临时表显式删除"></a>将所有的临时表显式删除</h1><p>如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定。</p><h1 id="尽量避免使用游标"><a href="#尽量避免使用游标" class="headerlink" title="尽量避免使用游标"></a>尽量避免使用游标</h1><p>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写</p><h1 id="尽量避免返回大数据量"><a href="#尽量避免返回大数据量" class="headerlink" title="尽量避免返回大数据量"></a>尽量避免返回大数据量</h1><p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。</p><h1 id="拆分大的-DELETE-或INSERT-语句，批量提交SQL语句"><a href="#拆分大的-DELETE-或INSERT-语句，批量提交SQL语句" class="headerlink" title="拆分大的 DELETE 或INSERT 语句，批量提交SQL语句"></a>拆分大的 DELETE 或INSERT 语句，批量提交SQL语句</h1><p>如果你需要在一个在线的网站上去执行一个大的 DELETE 或 INSERT 查询，你需要非常小心，要避免你的操作让你的整个网站停止相应。因为这两个操作是会锁表的，表一锁住了，别的操作都进不来了。<br>　　Apache 会有很多的子进程或线程。所以，其工作起来相当有效率，而我们的服务器也不希望有太多的子进程，线程和数据库链接，这是极大的占服务器资源的事情，尤其是内存。<br>　　如果你把你的表锁上一段时间，比如30秒钟，那么对于一个有很高访问量的站点来说，这30秒所积累的访问进程/线程，数据库链接，打开的文件数，可能不仅仅会让你的WEB服务崩溃，还可能会让你的整台服务器马上挂了。<br>　　所以，如果你有一个大的处理，你一定把其拆分，使用 LIMIT oracle(rownum),sqlserver(top)条件是一个好的方法。下面是一个mysql示例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql">while(<span class="hljs-number">1</span>)&#123;<br> 　　<span class="hljs-operator">/</span><span class="hljs-operator">/</span>每次只做<span class="hljs-number">1000</span>条<br>　　 mysql_query(“<span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> logs <span class="hljs-keyword">where</span> log_date <span class="hljs-operator">&lt;=</span> ’<span class="hljs-number">2012</span><span class="hljs-number">-11</span><span class="hljs-number">-01</span>’ limit <span class="hljs-number">1000</span>”);<br> 　　if(mysql_affected_rows() <span class="hljs-operator">=</span><span class="hljs-operator">=</span> <span class="hljs-number">0</span>)&#123;<br>　　 　　<span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除完成，退出！<br>　　 　　break；<br>　　&#125;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>每次暂停一段时间，释放表让其他进程<span class="hljs-operator">/</span>线程访问。<br>usleep(<span class="hljs-number">50000</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="运维角度浅谈MySQL数据库优化"><a href="#运维角度浅谈MySQL数据库优化" class="headerlink" title="运维角度浅谈MySQL数据库优化"></a>运维角度浅谈MySQL数据库优化</h1><p>一个成熟的数据库架构并不是一开始设计就具备高可用、高伸缩等特性的，它是随着用户量的增加，基础架构才逐渐完善。这篇博文主要谈MySQL数据库发展周期中所面临的问题及优化方案，暂且抛开前端应用不说，大致分为以下五个阶段：</p><h2 id="1-数据库表设计"><a href="#1-数据库表设计" class="headerlink" title="1. 数据库表设计"></a>1. 数据库表设计</h2><p>项目立项后，开发部根据产品部需求开发项目，开发工程师工作其中一部分就是对表结构设计。对于数据库来说，这点很重要，如果设计不当，会直接影响访问速度和用户体验。影响的因素很多，比如慢查询、低效的查询语句、没有适当建立索引、数据库堵塞（死锁）等。当然，有测试工程师的团队，会做压力测试，找bug。对于没有测试工程师的团队来说，大多数开发工程师初期不会太多考虑数据库设计是否合理，而是尽快完成功能实现和交付，等项目有一定访问量后，隐藏的问题就会暴露，这时再去修改就不是这么容易的事了。</p><h2 id="2-数据库部署"><a href="#2-数据库部署" class="headerlink" title="2. 数据库部署"></a>2. 数据库部署</h2><p>该运维工程师出场了，项目初期访问量不会很大，所以单台部署足以应对在1500左右的QPS（每秒查询率）。考虑到高可用性，可采用MySQL主从复制+Keepalived做双击热备，常见集群软件有Keepalived、Heartbeat。<br>双机热备博文：<a href="http://lizhenliang.blog.51cto.com/7876557/1362313">http://lizhenliang.blog.51cto.com/7876557/1362313</a></p><h2 id="3-数据库性能优化"><a href="#3-数据库性能优化" class="headerlink" title="3. 数据库性能优化"></a>3. 数据库性能优化</h2><p>如果将MySQL部署到普通的X86服务器上，在不经过任何优化情况下，MySQL理论值正常可以处理2000左右QPS，经过优化后，有可能会提升到2500左右QPS，否则，访问量当达到1500左右并发连接时，数据库处理性能就会变慢，而且硬件资源还很富裕，这时就该考虑软件问题了。那么怎样让数据库最大化发挥性能呢？一方面可以单台运行多个MySQL实例让服务器性能发挥到最大化，另一方面是对数据库进行优化，往往操作系统和数据库默认配置都比较保守，会对数据库发挥有一定限制，可对这些配置进行适当的调整，尽可能的处理更多连接数。</p><h3 id="3-1-数据库配置优化"><a href="#3-1-数据库配置优化" class="headerlink" title="3.1 数据库配置优化"></a>3.1 数据库配置优化</h3><p>MySQL常用有两种存储引擎，一个是MyISAM，不支持事务处理，读性能处理快，表级别锁。另一个是InnoDB，支持事务处理（ACID），设计目标是为处理大容量数据发挥最大化性能，行级别锁。<br>表锁：开销小，锁定粒度大，发生死锁概率高，相对并发也低。<br>行锁：开销大，锁定粒度小，发生死锁概率低，相对并发也高。<br>为什么会出现表锁和行锁呢？主要是为了保证数据的完整性，举个例子，一个用户在操作一张表，其他用户也想操作这张表，那么就要等第一个用户操作完，其他用户才能操作，表锁和行锁就是这个作用。否则多个用户同时操作一张表，肯定会数据产生冲突或者异常。<br>根据以上看来，使用InnoDB存储引擎是最好的选择，也是MySQL5.5以后版本中默认存储引擎。每个存储引擎相关联参数比较多，以下列出主要影响数据库性能的参数。<br>公共参数默认值：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">max_connections</span> = <span class="hljs-number">151</span><br><span class="hljs-comment">#同时处理最大连接数，推荐设置最大连接数是上限连接数的80%左右   </span><br><span class="hljs-attr">sort_buffer_size</span> = <span class="hljs-number">2</span>M<br><span class="hljs-comment">#查询排序时缓冲区大小，只对order by和group by起作用，可增大此值为16M</span><br><span class="hljs-attr">open_files_limit</span> = <span class="hljs-number">1024</span> <br><span class="hljs-comment">#打开文件数限制，如果show global status like &#x27;open_files&#x27;查看的值等于或者大于open_files_limit值时，程序会无法连接数据库或卡死</span><br></code></pre></td></tr></table></figure><p>MyISAM参数默认值：</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">key_buffer_size</span> = <span class="hljs-number">16</span>M<br><span class="hljs-comment">#索引缓存区大小，一般设置物理内存的30-40%</span><br><span class="hljs-attr">read_buffer_size</span> = <span class="hljs-number">128</span>K  <br><span class="hljs-comment">#读操作缓冲区大小，推荐设置16M或32M</span><br><span class="hljs-attr">query_cache_type</span> = <span class="hljs-literal">ON</span><br><span class="hljs-comment">#打开查询缓存功能</span><br><span class="hljs-attr">query_cache_limit</span> = <span class="hljs-number">1</span>M  <br><span class="hljs-comment">#查询缓存限制，只有1M以下查询结果才会被缓存，以免结果数据较大把缓存池覆盖</span><br><span class="hljs-attr">query_cache_size</span> = <span class="hljs-number">16</span>M  <br><span class="hljs-comment">#查看缓冲区大小，用于缓存SELECT查询结果，下一次有同样SELECT查询将直接从缓存池返回结果，可适当成倍增加此值</span><br></code></pre></td></tr></table></figure><p>InnoDB参数默认值：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">innodb_buffer_pool_size = 128M<br><span class="hljs-comment">#索引和数据缓冲区大小，一般设置物理内存的60%-70%</span><br>innodb_buffer_pool_instances = 1    <br><span class="hljs-comment">#缓冲池实例个数，推荐设置4个或8个</span><br>innodb_flush_log_at_trx_commit = 1  <br><span class="hljs-comment">#关键参数，0代表大约每秒写入到日志并同步到磁盘，数据库故障会丢失1秒左右事务数据。1为每执行一条SQL后写入到日志并同步到磁盘，I/O开销大，执行完SQL要等待日志读写，效率低。2代表只把日志写入到系统缓存区，再每秒同步到磁盘，效率很高，如果服务器故障，才会丢失事务数据。对数据安全性要求不是很高的推荐设置2，性能高，修改后效果明显。</span><br>innodb_file_per_table = OFF  <br><span class="hljs-comment">#默认是共享表空间，共享表空间idbdata文件不断增大，影响一定的I/O性能。推荐开启独立表空间模式，每个表的索引和数据都存在自己独立的表空间中，可以实现单表在不同数据库中移动。</span><br>innodb_log_buffer_size = 8M  <br><span class="hljs-comment">#日志缓冲区大小，由于日志最长每秒钟刷新一次，所以一般不用超过16M</span><br></code></pre></td></tr></table></figure><h3 id="3-2-系统内核优化"><a href="#3-2-系统内核优化" class="headerlink" title="3.2 系统内核优化"></a>3.2 系统内核优化</h3><p>大多数MySQL都部署在linux系统上，所以操作系统的一些参数也会影响到MySQL性能，以下对linux内核进行适当优化。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs bash">net.ipv4.tcp_fin_timeout = 30<br><span class="hljs-comment">#TIME_WAIT超时时间，默认是60s</span><br>net.ipv4.tcp_tw_reuse = 1    <br><span class="hljs-comment">#1表示开启复用，允许TIME_WAIT socket重新用于新的TCP连接，0表示关闭</span><br>net.ipv4.tcp_tw_recycle = 1  <br><span class="hljs-comment">#1表示开启TIME_WAIT socket快速回收，0表示关闭</span><br>net.ipv4.tcp_max_tw_buckets = 4096   <br><span class="hljs-comment">#系统保持TIME_WAIT socket最大数量，如果超出这个数，系统将随机清除一些TIME_WAIT并打印警告信息</span><br>net.ipv4.tcp_max_syn_backlog = 4096<br><span class="hljs-comment">#进入SYN队列最大长度，加大队列长度可容纳更多的等待连接</span><br></code></pre></td></tr></table></figure><p>在linux系统中，如果进程打开的文件句柄数量超过系统默认值1024，就会提示“too many files open”信息，所以要调整打开文件句柄限制。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># vi /etc/security/limits.conf  #加入以下配置，*代表所有用户，也可以指定用户，重启系统生效</span><br>* soft nofile 65535<br>* hard nofile 65535<br><span class="hljs-comment"># ulimit -SHn 65535   #立刻生效</span><br></code></pre></td></tr></table></figure><h3 id="3-3-硬件配置"><a href="#3-3-硬件配置" class="headerlink" title="3.3 硬件配置"></a>3.3 硬件配置</h3><p>加大物理内存，提高文件系统性能。linux内核会从内存中分配出缓存区（系统缓存和数据缓存）来存放热数据，通过文件系统延迟写入机制，等满足条件时（如缓存区大小到达一定百分比或者执行sync命令）才会同步到磁盘。也就是说物理内存越大，分配缓存区越大，缓存数据越多。当然，服务器故障会丢失一定的缓存数据。<br>SSD硬盘代替SAS硬盘，将RAID级别调整为RAID1+0，相对于RAID1和RAID5有更好的读写性能（IOPS），毕竟数据库的压力主要来自磁盘I/O方面。</p><h2 id="4-数据库架构扩展"><a href="#4-数据库架构扩展" class="headerlink" title="4 数据库架构扩展"></a>4 数据库架构扩展</h2><p>随着业务量越来越大，单台数据库服务器性能已无法满足业务需求，该考虑加机器了，该做集群了。主要思想是分解单台数据库负载，突破磁盘I/O性能，热数据存放缓存中，降低磁盘I/O访问频率。</p><h3 id="4-1-主从复制与读写分离"><a href="#4-1-主从复制与读写分离" class="headerlink" title="4.1 主从复制与读写分离"></a>4.1 主从复制与读写分离</h3><p>因为生产环境中，数据库大多都是读操作，所以部署一主多从架构，主数据库负责写操作，并做双击热备，多台从数据库做负载均衡，负责读操作，主流的负载均衡器有LVS、HAProxy、Nginx。<br>怎么来实现读写分离呢？大多数企业是在代码层面实现读写分离，效率比较高。另一个种方式通过代理程序实现读写分离，企业中应用较少，常见代理程序有MySQL Proxy、Amoeba。在这样数据库集群架构中，大大增加数据库高并发能力，解决单台性能瓶颈问题。如果从数据库一台从库能处理2000 QPS，那么5台就能处理1w QPS，数据库横向扩展性也很容易。<br>有时，面对大量写操作的应用时，单台写性能达不到业务需求。如果做双主，就会遇到数据库数据不一致现象，产生这个原因是在应用程序不同的用户会有可能操作两台数据库，同时的更新操作造成两台数据库数据库数据发生冲突或者不一致。在单库时MySQL利用存储引擎机制表锁和行锁来保证数据完整性，怎样在多台主库时解决这个问题呢？有一套基于perl语言开发的主从复制管理工具，叫MySQL-MMM（Master-Master replication managerfor Mysql，Mysql主主复制管理器），这个工具最大的优点是在同一时间只提供一台数据库写操作，有效保证数据一致性。<br>主从复制博文：<a href="http://lizhenliang.blog.51cto.com/7876557/1290431">http://lizhenliang.blog.51cto.com/7876557/1290431</a><br>读写分离博文：<a href="http://lizhenliang.blog.51cto.com/7876557/1305083">http://lizhenliang.blog.51cto.com/7876557/1305083</a><br>MySQL-MMM博文：<a href="http://lizhenliang.blog.51cto.com/7876557/1354576">http://lizhenliang.blog.51cto.com/7876557/1354576</a></p><h3 id="4-2-增加缓存"><a href="#4-2-增加缓存" class="headerlink" title="4.2 增加缓存"></a>4.2 增加缓存</h3><p>给数据库增加缓存系统，把热数据缓存到内存中，如果缓存中有要请求的数据就不再去数据库中返回结果，提高读性能。缓存实现有本地缓存和分布式缓存，本地缓存是将数据缓存到本地服务器内存中或者文件中。分布式缓存可以缓存海量数据，扩展性好，主流的分布式缓存系统有memcached、redis，memcached性能稳定，数据缓存在内存中，速度很快，QPS可达8w左右。如果想数据持久化就选择用redis，性能不低于memcached。</p><h3 id="4-3-分库"><a href="#4-3-分库" class="headerlink" title="4.3 分库"></a>4.3 分库</h3><p>分库是根据业务不同把相关的表切分到不同的数据库中，比如web、bbs、blog等库。如果业务量很大，还可将切分后的库做主从架构，进一步避免单个库压力过大</p><h3 id="4-4-分表"><a href="#4-4-分表" class="headerlink" title="4.4 分表"></a>4.4 分表</h3><p>数据量的日剧增加，数据库中某个表有几百万条数据，导致查询和插入耗时太长，怎么能解决单表压力呢？你就该考虑是否把这个表拆分成多个小表，来减轻单个表的压力，提高处理效率，此方式称为分表。<br>分表技术比较麻烦，要修改程序代码里的SQL语句，还要手动去创建其他表，也可以用merge存储引擎实现分表，相对简单许多。分表后，程序是对一个总表进行操作，这个总表不存放数据，只有一些分表的关系，以及更新数据的方式，总表会根据不同的查询，将压力分到不同的小表上，因此提高并发能力和磁盘I/O性能。<br>分表分为垂直拆分和水平拆分：<br>垂直拆分：把原来的一个很多字段的表拆分多个表，解决表的宽度问题。你可以把不常用的字段单独放到一个表中，也可以把大字段独立放一个表中，或者把关联密切的字段放一个表中。<br>水平拆分：把原来一个表拆分成多个表，每个表的结构都一样，解决单表数据量大的问题。</p><h3 id="4-5-分区"><a href="#4-5-分区" class="headerlink" title="4.5 分区"></a>4.5 分区</h3><p>分区就是把一张表的数据根据表结构中的字段（如range、list、hash等）分成多个区块，这些区块可以在一个磁盘上，也可以在不同的磁盘上，分区后，表面上还是一张表，但数据散列在多个位置，这样一来，多块硬盘同时处理不同的请求，从而提高磁盘I/O读写性能，实现比较简单。<br>注：增加缓存、分库、分表和分区主要由程序猿来实现。</p><h2 id="5-数据库维护"><a href="#5-数据库维护" class="headerlink" title="5 数据库维护"></a>5 数据库维护</h2><p>数据库维护是运维工程师或者DBA主要工作，包括性能监控、性能分析、性能调优、数据库备份和恢复等。</p><h3 id="5-1-性能状态关键指标"><a href="#5-1-性能状态关键指标" class="headerlink" title="5.1 性能状态关键指标"></a>5.1 性能状态关键指标</h3><p>QPS，Queries Per Second：每秒查询数，一台数据库每秒能够处理的查询次数<br>TPS，Transactions Per Second：每秒处理事务数<br>通过show status查看运行状态，会有300多条状态信息记录，其中有几个值帮可以我们计算出QPS和TPS，如下：<br>Uptime：服务器已经运行的实际，单位秒<br>Questions：已经发送给数据库查询数<br>Com_select：查询次数，实际操作数据库的<br>Com_insert：插入次数<br>Com_delete：删除次数<br>Com_update：更新次数<br>Com_commit：事务次数<br>Com_rollback：回滚次数<br>那么，计算方法来了，基于Questions计算出QPS：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> show global status like <span class="hljs-string">&#x27;Questions&#x27;</span>;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> show global status like <span class="hljs-string">&#x27;Uptime&#x27;</span>;</span><br></code></pre></td></tr></table></figure><p>QPS = Questions / Uptime<br>基于Com_commit和Com_rollback计算出TPS：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> show global status like <span class="hljs-string">&#x27;Com_commit&#x27;</span>;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> show global status like <span class="hljs-string">&#x27;Com_rollback&#x27;</span>;</span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> show global status like <span class="hljs-string">&#x27;Uptime&#x27;</span>;</span><br></code></pre></td></tr></table></figure><p>TPS = (Com_commit + Com_rollback) / Uptime<br>另一计算方式：基于Com_select、Com_insert、Com_delete、Com_update计算出QPS</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> show global status <span class="hljs-built_in">where</span> Variable_name <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;com_select&#x27;</span>,<span class="hljs-string">&#x27;com_insert&#x27;</span>,<span class="hljs-string">&#x27;com_delete&#x27;</span>,<span class="hljs-string">&#x27;com_update&#x27;</span>);</span><br></code></pre></td></tr></table></figure><p>等待1秒再执行，获取间隔差值，第二次每个变量值减去第一次对应的变量值，就是QPS<br>TPS计算方法：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> show global status <span class="hljs-built_in">where</span> Variable_name <span class="hljs-keyword">in</span>(<span class="hljs-string">&#x27;com_insert&#x27;</span>,<span class="hljs-string">&#x27;com_delete&#x27;</span>,<span class="hljs-string">&#x27;com_update&#x27;</span>);</span><br></code></pre></td></tr></table></figure><p>计算TPS，就不算查询操作了，计算出插入、删除、更新四个值即可。<br>经网友对这两个计算方式的测试得出，当数据库中myisam表比较多时，使用Questions计算比较准确。当数据库中innodb表比较多时，则以Com_*计算比较准确。</p><h3 id="5-2-开启慢查询日志"><a href="#5-2-开启慢查询日志" class="headerlink" title="5.2 开启慢查询日志"></a>5.2 开启慢查询日志</h3><p>MySQL开启慢查询日志，分析出哪条SQL语句比较慢，使用set设置变量，重启服务失效，可以在my.cnf添加参数永久生效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">mysql&gt;</span><span class="bash"> <span class="hljs-built_in">set</span> global slow-query-log=on  <span class="hljs-comment">#开启慢查询功能</span></span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> <span class="hljs-built_in">set</span> global slow_query_log_file=<span class="hljs-string">&#x27;/var/log/mysql/mysql-slow.log&#x27;</span>;  <span class="hljs-comment">#指定慢查询日志文件位置</span></span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> <span class="hljs-built_in">set</span> global log_queries_not_using_indexes=on;   <span class="hljs-comment">#记录没有使用索引的查询</span></span><br><span class="hljs-meta">mysql&gt;</span><span class="bash"> <span class="hljs-built_in">set</span> global long_query_time=1;   <span class="hljs-comment">#只记录处理时间1s以上的慢查询</span></span><br></code></pre></td></tr></table></figure><p>分析慢查询日志，可以使用MySQL自带的mysqldumpslow工具，分析的日志较为简单。<br><code># mysqldumpslow -t 3 /var/log/mysql/mysql-slow.log</code>    #查看最慢的前三个查询<br>也可以使用percona公司的pt-query-digest工具，日志分析功能全面，可分析slow log、binlog、general log。<br>分析慢查询日志：pt-query-digest /var/log/mysql/mysql-slow.log<br>分析binlog日志：mysqlbinlog mysql-bin.000001 &gt;mysql-bin.000001.sql<br>pt-query-digest –type=binlog mysql-bin.000001.sql<br>分析普通日志：pt-query-digest –type=genlog localhost.log</p><h3 id="5-3-数据库备份"><a href="#5-3-数据库备份" class="headerlink" title="5.3 数据库备份"></a>5.3 数据库备份</h3><p>备份数据库是最基本的工作，也是最重要的，否则后果很严重，你懂得！但由于数据库比较大，上百G，往往备份都很耗费时间，所以就该选择一个效率高的备份策略，对于数据量大的数据库，一般都采用增量备份。常用的备份工具有mysqldump、mysqlhotcopy、xtrabackup等，mysqldump比较适用于小的数据库，因为是逻辑备份，所以备份和恢复耗时都比较长。mysqlhotcopy和xtrabackup是物理备份，备份和恢复速度快，不影响数据库服务情况下进行热拷贝，建议使用xtrabackup，支持增量备份。<br>Xtrabackup备份工具使用博文：<a href="http://lizhenliang.blog.51cto.com/7876557/1612800">http://lizhenliang.blog.51cto.com/7876557/1612800</a></p><h3 id="5-4-数据库修复"><a href="#5-4-数据库修复" class="headerlink" title="5.4 数据库修复"></a>5.4 数据库修复</h3><p>有时候MySQL服务器突然断电、异常关闭，会导致表损坏，无法读取表数据。这时就可以用到MySQL自带的两个工具进行修复，myisamchk和mysqlcheck。<br>myisamchk：只能修复myisam表，需要停止数据库<br>常用参数：<br>-f –force    强制修复，覆盖老的临时文件，一般不使用<br>-r –recover  恢复模式<br>-q –quik     快速恢复<br>-a –analyze  分析表<br>-o –safe-recover 老的恢复模式，如果-r无法修复，可以使用此参数试试<br>-F –fast     只检查没有正常关闭的表<br>快速修复weibo数据库:<br><code># cd /var/lib/mysql/weibo</code><br><code># myisamchk -r -q *.MYI</code><br>mysqlcheck：myisam和innodb表都可以用，不需要停止数据库，如修复单个表，可在数据库后面添加表名，以空格分割<br>常用参数：<br>-a  –all-databases  检查所有的库<br>-r  –repair   修复表<br>-c  –check    检查表，默认选项<br>-a  –analyze  分析表<br>-o  –optimize 优化表<br>-q  –quik   最快检查或修复表<br>-F  –fast   只检查没有正常关闭的表<br>快速修复weibo数据库:<br><code># mysqlcheck -r -q -uroot -p123 weibo</code></p><blockquote><p>以上内容整理于网络（侵删）</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Docx4j导出latex公式到word（公式可编辑）</title>
    <link href="/2019/11/19/Docx4j%E5%AF%BC%E5%87%BAlatex%E5%85%AC%E5%BC%8F%E5%88%B0word%EF%BC%88%E5%85%AC%E5%BC%8F%E5%8F%AF%E7%BC%96%E8%BE%91%EF%BC%89/"/>
    <url>/2019/11/19/Docx4j%E5%AF%BC%E5%87%BAlatex%E5%85%AC%E5%BC%8F%E5%88%B0word%EF%BC%88%E5%85%AC%E5%BC%8F%E5%8F%AF%E7%BC%96%E8%BE%91%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><h3 id="依赖项"><a href="#依赖项" class="headerlink" title="依赖项"></a>依赖项</h3><p><code>docx4j</code>：操作word文档（.docx）</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.docx4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>docx4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>6.0.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-comment">&lt;!--下面这个jar好像不引入也没问题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>javax.xml.bind<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jaxb-api<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>latex-word（第三方jar包）</code>：将latex值转成符合word xml标准的工具</p><p>github项目地址为：<a href="https://github.com/mao-yuwei/latex_word">https://github.com/mao-yuwei/latex_word</a></p><p>相关文章为：<a href="https://blog.csdn.net/weixin_30633405/article/details/98518909">https://blog.csdn.net/weixin_30633405/article/details/98518909</a></p><h3 id="关键步骤"><a href="#关键步骤" class="headerlink" title="关键步骤"></a>关键步骤</h3><ol><li><p>调用<code>com.latextoword.Latex_Word.latexToWordAlreadyClean</code>方法获取到latex对应的xml字符串，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">m:oMath</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">m:oMath</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>给根节点添加必要（非常重要，否则生成的文档将无法正常打开）的<code>namespace</code>：<code>xmlns:w=\&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main\&quot; xmlns:m=\&quot;http://schemas.openxmlformats.org/officeDocument/2006/math\&quot;</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">m:oMath</span> <span class="hljs-attr">xmlns:w</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/wordprocessingml/2006/main&quot;</span> <span class="hljs-attr">xmlns:m</span>=<span class="hljs-string">&quot;http://schemas.openxmlformats.org/officeDocument/2006/math&quot;</span>&gt;</span>......<span class="hljs-tag">&lt;/<span class="hljs-name">m:oMath</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>调用<code>org.docx4j.XmlUtils.unmarshalString</code>方法将最终拼接好的xml字符串解析为Object</p></li><li><p>将转换好的对象add到word的元素对象中（诸如org.docx4j.wml.P）</p></li><li><p>最终效果如下</p><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/20191121190307.png"></p></li></ol><h3 id="代码参考"><a href="#代码参考" class="headerlink" title="代码参考"></a>代码参考</h3><blockquote><p><a href="https://github.com/surpass-wei/operating-office-demo/blob/master/src/main/java/com/surpass/word/WriteLaTeXFormula.java">https://github.com/surpass-wei/operating-office-demo/blob/master/src/main/java/com/surpass/word/WriteLaTeXFormula.java</a></p></blockquote><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><blockquote><p><a href="https://blog.csdn.net/weixin_30633405/article/details/98518909">https://blog.csdn.net/weixin_30633405/article/details/98518909</a><br><a href="https://github.com/mao-yuwei/latex_word">https://github.com/mao-yuwei/latex_word</a><br><a href="https://github.com/plutext/docx4j/blob/master/docx4j-samples-docx4j/src/main/java/org/docx4j/samples/MathsEquationsFormulae.java">https://github.com/plutext/docx4j/blob/master/docx4j-samples-docx4j/src/main/java/org/docx4j/samples/MathsEquationsFormulae.java</a></p></blockquote>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>一次Tomcat CPU占用忽高忽低的排查记录</title>
    <link href="/2019/11/19/%E4%B8%80%E6%AC%A1Tomcat-CPU%E5%8D%A0%E7%94%A8%E5%BF%BD%E9%AB%98%E5%BF%BD%E4%BD%8E%E7%9A%84%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/"/>
    <url>/2019/11/19/%E4%B8%80%E6%AC%A1Tomcat-CPU%E5%8D%A0%E7%94%A8%E5%BF%BD%E9%AB%98%E5%BF%BD%E4%BD%8E%E7%9A%84%E6%8E%92%E6%9F%A5%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><code>CentOS 7</code> <code>apache-tomcat-8.0.28</code> </p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>用<code>top</code>命令查看系统资源暂用情况，发现CPU暂用忽高忽低（一会占用1%一会又飙升至40~80%）</p><h2 id="排查方式"><a href="#排查方式" class="headerlink" title="排查方式"></a>排查方式</h2><ol><li><code>top -c</code>命令查到导致cpu占用异常的进程的<code>PID</code>，确定为是tomcat</li><li><code>top -H -p &#123;PID&#125;</code>获取该进程的线程的详细资源占用情况<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/20191109181039.png"></li><li>可以看到是PID为19511的线程导致，将19511转16进制，得到：<code>4c37</code></li><li><code>jstack -l &#123;PID&#125;</code>查看堆栈信息，找到nid为<code>0x4c37</code>的信息，可以看到，这个可能跟tomcat容器本身相关，拿到关键的错误信息上网查询🤣，最后查到了这个<a href="https://blog.csdn.net/u013727805/article/details/86605300">https://blog.csdn.net/u013727805/article/details/86605300</a>,最后定位到可能是tomcat的热更新导致，关闭项目的热更新，CPU占用即恢复正常<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/20191109182105.png"></li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>myBatis使用redis做二级缓存时需要注意的几个地方</title>
    <link href="/2019/08/01/myBatis%E4%BD%BF%E7%94%A8redis%E5%81%9A%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9C%B0%E6%96%B9/"/>
    <url>/2019/08/01/myBatis%E4%BD%BF%E7%94%A8redis%E5%81%9A%E4%BA%8C%E7%BA%A7%E7%BC%93%E5%AD%98%E6%97%B6%E9%9C%80%E8%A6%81%E6%B3%A8%E6%84%8F%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9C%B0%E6%96%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="myBatis使用redis做二级缓存时需要注意的几个地方"><a href="#myBatis使用redis做二级缓存时需要注意的几个地方" class="headerlink" title="myBatis使用redis做二级缓存时需要注意的几个地方"></a>myBatis使用redis做二级缓存时需要注意的几个地方</h1><p>最新在做的一个项目，由于读业务多，写业务不频繁，所以采用redis做了个二级缓存来提高读的效率，但是在整个过程中，遇到了一些比较容易犯，而且也很严重的错误。</p><p>环境：<code>spring boot</code>  <code>redis</code></p><h2 id="redis缓存突然全部丢失"><a href="#redis缓存突然全部丢失" class="headerlink" title="redis缓存突然全部丢失"></a>redis缓存突然全部丢失</h2><p>由于原来redis缓存只应用在myBatis的缓存上，所以并没有即时发现这个问题，后来由于业务需要，额外在redis中主动缓存了一些需要处理一段时间才能计算出来的数据，才发现这个redis缓存在某些条件触发下会全部清空的问题。</p><p>具体导致这个问题的是由于实现<code>org.apache.ibatis.cache.Cache</code>的配置类中的<code>clear</code>方法不合适导致的。</p><p>在网上查到的很多Spring Boot + Mybatis + Redis做二级缓存的资料都是这样配置的：<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/20190801192524.png"><br>上面这种写法，直接调用<code>connection.flushDb();</code>会删除当前选定数据库的所有键,这也就导致很多不该被删除的缓存数据，都被删除了。很多像我一样的小白并没有深究这种写法，照抄下来，结果就会很悲剧了，而且发生之后还一脸懵逼，不知道哪儿出了问题。</p><p>那应该如何解决这个问题呢？我目前采用的是以下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>    RedisTemplate redisTemplate = getRedisTemplate();<br>    String id = <span class="hljs-keyword">this</span>.id;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">     * 这里不论是调用keys方法还是调用del方法，都只能使用connection，不能使用redisTemplate，否则无效！！！！！！！！！！！！！</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 参考资料：https://stackoverflow.com/questions/19098079/how-to-get-all-keys-from-redis-using-redis-template</span><br><span class="hljs-comment">     */</span><br>    redisTemplate.execute((RedisCallback) connection -&gt; &#123;<br>        String patten = <span class="hljs-string">&quot;*:&quot;</span> + id + <span class="hljs-string">&quot;*&quot;</span>;<br>        Set&lt;<span class="hljs-keyword">byte</span>[]&gt; keys = connection.keys(patten.getBytes());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span>[] data : keys) &#123;<br>            connection.del(data);<br>        &#125;<br>        connection.close();<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;);<br>    logger.warn(<span class="hljs-string">&quot;Clear cached query result from redis&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这种方式就只会去删除与缓存实例ID相匹配的键的缓存数据。完整的配置类如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyBatisRedisCache</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cache</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Logger logger = LoggerFactory.getLogger(MyBatisRedisCache.class);<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> ReadWriteLock readWriteLock = <span class="hljs-keyword">new</span> ReentrantReadWriteLock();<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> String id; <span class="hljs-comment">// cache instance id</span><br>    <span class="hljs-keyword">private</span> RedisTemplate redisTemplate;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">long</span> EXPIRE_TIME_IN_MINUTES = <span class="hljs-number">72</span> * <span class="hljs-number">60</span> * <span class="hljs-number">60</span>; <span class="hljs-comment">// redis过期时间</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyBatisRedisCache</span><span class="hljs-params">(String id)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (id == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> IllegalArgumentException(<span class="hljs-string">&quot;Cache instances require an ID&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">this</span>.id = id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getId</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">putObject</span><span class="hljs-params">(Object key, Object value)</span> </span>&#123;<br>        RedisTemplate redisTemplate = getRedisTemplate();<br>        ValueOperations opsForValue = redisTemplate.opsForValue();<br>        <span class="hljs-comment">//  键值要toString</span><br>        opsForValue.set(key.toString(), value, EXPIRE_TIME_IN_MINUTES, TimeUnit.MINUTES);<br>        logger.debug(<span class="hljs-string">&quot;Put query result to redis&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">getObject</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        RedisTemplate redisTemplate = getRedisTemplate();<br>        ValueOperations opsForValue = redisTemplate.opsForValue();<br>        logger.debug(<span class="hljs-string">&quot;Get cached query result from redis&quot;</span>);<br>        <span class="hljs-keyword">return</span> opsForValue.get(key.toString());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-meta">@SuppressWarnings(&quot;unchecked&quot;)</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">removeObject</span><span class="hljs-params">(Object key)</span> </span>&#123;<br>        RedisTemplate redisTemplate = getRedisTemplate();<br>        redisTemplate.delete(key.toString());<br>        logger.debug(<span class="hljs-string">&quot;Remove cached query result from redis&quot;</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>&#123;<br>        RedisTemplate redisTemplate = getRedisTemplate();<br>        String id = <span class="hljs-keyword">this</span>.id;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">         * 这里不论是调用keys方法还是调用del方法，都只能使用connection，不能使用redisTemplate，否则无效！！！！！！！！！！！！！</span><br><span class="hljs-comment">         * </span><br><span class="hljs-comment">         * 参考资料：https://stackoverflow.com/questions/19098079/how-to-get-all-keys-from-redis-using-redis-template</span><br><span class="hljs-comment">         */</span><br>        redisTemplate.execute((RedisCallback) connection -&gt; &#123;<br>            String patten = <span class="hljs-string">&quot;*:&quot;</span> + id + <span class="hljs-string">&quot;*&quot;</span>;<br>            Set&lt;<span class="hljs-keyword">byte</span>[]&gt; keys = connection.keys(patten.getBytes());<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">byte</span>[] data : keys) &#123;<br>                connection.del(data);<br>            &#125;<br>            connection.close();<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;);<br>        logger.warn(<span class="hljs-string">&quot;Clear cached query result from redis&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span> </span>&#123;<br>        Long size = (Long) redisTemplate.execute((RedisCallback&lt;Long&gt;) connection -&gt; connection.dbSize());<br>        logger.info(<span class="hljs-string">&quot;cached count:&quot;</span> + size.intValue());<br>        <span class="hljs-keyword">return</span> size.intValue();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ReadWriteLock <span class="hljs-title">getReadWriteLock</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> readWriteLock;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> RedisTemplate <span class="hljs-title">getRedisTemplate</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (redisTemplate == <span class="hljs-keyword">null</span>) &#123;<br>            redisTemplate = (RedisTemplate) SpringContextUtil.getApplicationContext().getBean(<span class="hljs-string">&quot;redisTemplate&quot;</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> redisTemplate;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mvn deploy命令发布jar包报错</title>
    <link href="/2019/01/11/mvn-deploy%E5%91%BD%E4%BB%A4%E5%8F%91%E5%B8%83jar%E5%8C%85%E6%8A%A5%E9%94%99/"/>
    <url>/2019/01/11/mvn-deploy%E5%91%BD%E4%BB%A4%E5%8F%91%E5%B8%83jar%E5%8C%85%E6%8A%A5%E9%94%99/</url>
    
    <content type="html"><![CDATA[<h1 id="错误内容"><a href="#错误内容" class="headerlink" title="错误内容"></a>错误内容</h1><p><code>[ERROR] The goal you specified requires a project to execute but there is no POM in this directory (C:\Users\dell\Desktop\newJar). Please verify you invoked Maven from the correct directory.</code><br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/100033547.png?imageslim" alt="mark"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>需要在一个有包含pom文件的目录下执行命令</p>]]></content>
    
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>根据端口结束进程的BAT</title>
    <link href="/2018/06/13/%E6%A0%B9%E6%8D%AE%E7%AB%AF%E5%8F%A3%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B%E7%9A%84BAT/"/>
    <url>/2018/06/13/%E6%A0%B9%E6%8D%AE%E7%AB%AF%E5%8F%A3%E7%BB%93%E6%9D%9F%E8%BF%9B%E7%A8%8B%E7%9A%84BAT/</url>
    
    <content type="html"><![CDATA[<blockquote><p>只有放在BAT文件中才可以执行</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br>setlocal enabledelayedexpansion<br><span class="hljs-keyword">for</span> /f <span class="hljs-string">&quot;delims= tokens=1&quot;</span> %%i <span class="hljs-keyword">in</span> (<span class="hljs-string">&#x27;netstat -aon ^| findstr &quot;0.0.0.0:你的端口 &quot;&#x27;</span>) <span class="hljs-keyword">do</span> (<br><span class="hljs-built_in">set</span> a=%%i<br>goto js<br>)<br>:js<br>taskkill /f /pid <span class="hljs-string">&quot;!a:~71,5!&quot;</span><br>pause<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>bat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>maven未将resource下所有文件打包</title>
    <link href="/2017/10/25/maven%E6%9C%AA%E5%B0%86resource%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/"/>
    <url>/2017/10/25/maven%E6%9C%AA%E5%B0%86resource%E4%B8%8B%E6%89%80%E6%9C%89%E6%96%87%E4%BB%B6%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h2 id="问题引出"><a href="#问题引出" class="headerlink" title="问题引出"></a>问题引出</h2><p>运行maven打包命令或直接运行程序时报错，提示resource下某个配置文件找不到（甚至可能是某个文件夹下的所有配置），但是该文件在项目中是存在的</p><h2 id="解决思路"><a href="#解决思路" class="headerlink" title="解决思路"></a>解决思路</h2><ol><li><p>直接运行maven打包命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn package -DskipTests<br></code></pre></td></tr></table></figure><p><code>-DskipTests</code>参数是用于跳过所有测试</p></li><li><p>检查打包后生成的target目录，将打包后的jar(或者war)解压查看，确定根目录下是否存在引用不到的资源</p></li><li><p>jar中确实没有资源文件，那么这就是问题所在了，maven未能将resource下所有的资源文件打入包中</p></li><li><p>对pom文件进行配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">directory</span>&gt;</span>src/main/resources<span class="hljs-tag">&lt;/<span class="hljs-name">directory</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-comment">&lt;!--包含文件夹以及子文件夹下所有资源--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">include</span>&gt;</span>**/*.*<span class="hljs-tag">&lt;/<span class="hljs-name">include</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">includes</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resource</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">resources</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>重新打包再检查</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mvn clean<br>mvn package -DskipTests<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>常见问题</tag>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>命令行开启windows WIFI共享</title>
    <link href="/2017/09/25/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%80%E5%90%AFwindows-WIFI%E5%85%B1%E4%BA%AB/"/>
    <url>/2017/09/25/%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%BC%80%E5%90%AFwindows-WIFI%E5%85%B1%E4%BA%AB/</url>
    
    <content type="html"><![CDATA[<h2 id="承载网络配置"><a href="#承载网络配置" class="headerlink" title="承载网络配置"></a>承载网络配置</h2><p>1. 输入以下命令配置 wifi 信息（也可用于更新WIFI信息）</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">netsh wlan <span class="hljs-builtin-name">set</span> hostednetwork <span class="hljs-attribute">mode</span>=allow ssid=&#123;WIFI名称&#125; key=&#123;WIFI密码&#125;<br></code></pre></td></tr></table></figure><p>2. 启动WIFI(启动之后就可以连接啦)</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">netsh wlan <span class="hljs-literal">start</span> hostednetwork<br></code></pre></td></tr></table></figure><p>3. 如果需要关闭WIFI，则执行以下命令</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">netsh wlan stop hostednetwork<br></code></pre></td></tr></table></figure><ol start="4"><li>还可以查看当前WIFI的连接信息<figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart">netsh wlan <span class="hljs-keyword">show</span> hostednetwork<br></code></pre></td></tr></table></figure></li></ol><h2 id="网络访问配置"><a href="#网络访问配置" class="headerlink" title="网络访问配置"></a>网络访问配置</h2><p>如果发现连接成功，但是无法上网，那么，还需要配置网络共享<br>1. 进入 控制面板 &gt; 网络和 Internet &gt; 网络连接 &gt; 更改适配器设置<br>2. 选中当前的宽带连接，右键 &gt; 属性 &gt; 共享选项卡 &gt; 选中允许其他网络用户…… 选择为带有wifi名称的本地连接<br>3. 然后可以试试是否可以上网了，不行的话，重启下电脑</p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>windows</tag>
      
      <tag>技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于MySQL 在windows环境下的启动错误：1053的解决方案</title>
    <link href="/2017/08/17/%E5%85%B3%E4%BA%8EMySQL-%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF%EF%BC%9A1053%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2017/08/17/%E5%85%B3%E4%BA%8EMySQL-%E5%9C%A8windows%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF%EF%BC%9A1053%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h1 id="在修改配置文件my-ini后出现该问题："><a href="#在修改配置文件my-ini后出现该问题：" class="headerlink" title="在修改配置文件my.ini后出现该问题："></a>在修改配置文件my.ini后出现该问题：</h1><blockquote><p>如果是在修改了配置文件my.ini后出现1503的错误，那么很可能是因为在保存配置文件操作时，配置文件的编码也被改动了所引起的，因此，可以尝试如下操作：</p></blockquote><ol><li>再次打开配置文件，选择另存为，然后以ANSI编码保存，再替换原有配置文件</li><li>如果因为之前的启动失败，导致MySQL服务一直处于 <code>启动</code> 状态的话，需要手动去结束 <code>mysqld.exe</code> 进程后，再尝试启动服务</li></ol><h1 id="未修改任何配置的情况下出现该问题："><a href="#未修改任何配置的情况下出现该问题：" class="headerlink" title="未修改任何配置的情况下出现该问题："></a>未修改任何配置的情况下出现该问题：</h1><blockquote><p>这种情况一般处于 mysql 服务第一次启动的时候</p></blockquote><p>可以尝试以下几种操作：<br>第一种： 在服务的属性菜单中，选中登录选项卡，然后设置为采用 <code>administrator</code> 用户<br>第二种： 重新安装 mysql 服务<br>第三种： 可能是由于在安装服务时，命令<code>mysqld --install servicename --defaults-file=&#39;file_name&#39;</code> 中的 <code>defaults-file</code> 值适用的是单引号，所以会导致1053错误，因此修改为双引号安装服务即可</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>windows 优秀软件收集</title>
    <link href="/2017/08/16/windows-%E4%BC%98%E7%A7%80%E8%BD%AF%E4%BB%B6%E6%94%B6%E9%9B%86/"/>
    <url>/2017/08/16/windows-%E4%BC%98%E7%A7%80%E8%BD%AF%E4%BB%B6%E6%94%B6%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>作者是一个二十岁出头的JAVA程序员，且患有轻度电脑环境洁癖，该文章主要记录一些个人认为值得推荐和收藏的 windows 软件（不定期更新）。</p><h1 id="软件列表"><a href="#软件列表" class="headerlink" title="软件列表"></a>软件列表</h1><hr><h2 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h2><h3 id="IDEA-JAVA开发IDE-（以及jetbrains旗下其他产品）"><a href="#IDEA-JAVA开发IDE-（以及jetbrains旗下其他产品）" class="headerlink" title="IDEA (JAVA开发IDE)（以及jetbrains旗下其他产品）"></a><a href="https://www.jetbrains.com/idea/" title="IDEA">IDEA (JAVA开发IDE)</a>（以及jetbrains旗下其他产品）</h3><blockquote><p>“哇喔，原来还可以这样”，总之，这款 JAVA IDE 给我惊喜不断，很是享受</p></blockquote><h3 id="typora-markdown编辑器"><a href="#typora-markdown编辑器" class="headerlink" title="typora (markdown编辑器)"></a><a href="https://typora.io/" title="typora">typora (markdown编辑器)</a></h3><p><code>清爽</code> <code>独特</code> <code>免费</code></p><blockquote><p>清爽简洁的 markdown 编辑器，将「写字」和「预览」这两件事情合并，独树一帜</p></blockquote><h3 id="为知笔记"><a href="#为知笔记" class="headerlink" title="为知笔记"></a><a href="https://www.wiz.cn/" title="为知笔记">为知笔记</a></h3><p><code>代码高亮</code> <code>markdown插件支持</code> <code>支持多层目录</code> <code>一键发布博客</code></p><blockquote><p>个人觉得，最适合程序员的笔记软件，所以一口气买了2年会员，希望越做越好，不要让我失望~</p></blockquote><h3 id="VS-code-编辑器"><a href="#VS-code-编辑器" class="headerlink" title="VS code (编辑器)"></a><a href="https://code.visualstudio.com/" title="VS code">VS code (编辑器)</a></h3><p><code>插件丰富</code> <code>漂亮</code> <code>值得学习使用</code> <code>免费</code> <code>轻巧极速</code></p><blockquote><p>很强大，值得深入学习了解一下</p></blockquote><h3 id="Xmind-思维导图"><a href="#Xmind-思维导图" class="headerlink" title="Xmind (思维导图)"></a><a href="https://www.xmind.cn/" title="Xmind 思维导图">Xmind (思维导图)</a></h3><p><code>收费</code> <code>多画布</code> <code>好使</code></p><blockquote><p>虽然收费，但如果确实有这方面的需求，这款思维导图软件还是很值得一提的</p></blockquote><h3 id="everything-文件搜索"><a href="#everything-文件搜索" class="headerlink" title="everything (文件搜索)"></a><a href="https://www.voidtools.com/downloads/" title="everything (文件搜索)">everything (文件搜索)</a></h3><p><code>急速</code> <code>强大</code></p><blockquote><p>用来搜索文件快的不可思议，非常实用</p></blockquote><h3 id="坚果云-同步文件"><a href="#坚果云-同步文件" class="headerlink" title="坚果云 (同步文件)"></a><a href="https://www.jianguoyun.com/" title="坚果云 (同步文件)">坚果云 (同步文件)</a></h3><p><code>免费</code> <code>不限容量</code> <code>同步速度快</code></p><blockquote><p>对于需要同步的重要文件，只要丢到坚果云设置的本地文件夹就可以了，简单方便，不仅免费，而且不限容量（不过对免费用户限制了每个月的流量，但是用来同步普通文件肯定是够用了）</p></blockquote><h3 id="TIM-QQ轻聊"><a href="#TIM-QQ轻聊" class="headerlink" title="TIM (QQ轻聊)"></a><a href="http://tim.qq.com/" title="TIM (QQ轻聊)">TIM (QQ轻聊)</a></h3><p><code>无广告</code> <code>简洁</code></p><blockquote><p>之前一直用QQ轻聊，这也就是现在的TIM，腾讯官网出品，没有烦人广告的QQ</p></blockquote><h3 id="ScreenToGif-GIF录制、截图"><a href="#ScreenToGif-GIF录制、截图" class="headerlink" title="ScreenToGif (GIF录制、截图)"></a><a href="http://www.screentogif.com/?l=zh_cn" title="ScreenToGif (GIF录制、截图)">ScreenToGif (GIF录制、截图)</a></h3><p><code>纯净</code> <code>开源</code> <code>免费</code></p><blockquote><p>GIF录制、截图工具，功能强大</p></blockquote><h3 id="snipaste-截图-贴图工具"><a href="#snipaste-截图-贴图工具" class="headerlink" title="snipaste (截图+贴图工具)"></a><a href="https://zh.snipaste.com/" title="snipaste">snipaste (截图+贴图工具)</a></h3><p><code>免安装</code> `免费’ ‘取色’</p><blockquote><p>一款简单但强大的截图工具</p></blockquote><hr><h2 id="美化"><a href="#美化" class="headerlink" title="美化"></a>美化</h2><h3 id="wallhaven-壁纸网站"><a href="#wallhaven-壁纸网站" class="headerlink" title="wallhaven (壁纸网站)"></a><a href="https://alpha.wallhaven.cc/" title="wallhaven 壁纸网站">wallhaven (壁纸网站)</a></h3><blockquote><p>呃，虽然不是windows软件，但是上面真的有很多高质量的壁纸…</p></blockquote><h3 id="fliqlo-屏保"><a href="#fliqlo-屏保" class="headerlink" title="fliqlo (屏保)"></a><a href="http://fliqlo.com/" title="fliqlo (屏保)">fliqlo (屏保)</a></h3><p><code>文艺</code> <code>逼格</code> <code>时间</code> <code>简洁</code></p><blockquote><p>看着这么有文艺气息的屏保，可能人也会慢慢的变得文艺起来（骗自己）…</p></blockquote><hr><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><h3 id="geekuninstaller-卸载工具"><a href="#geekuninstaller-卸载工具" class="headerlink" title="geekuninstaller (卸载工具)"></a><a href="https://geekuninstaller.com/" title="geekuninstaller">geekuninstaller (卸载工具)</a></h3><p><code>中文</code> <code>免费</code></p><blockquote><p>一款深度卸载软件（清理遗留的注册表和文件）</p></blockquote><h3 id="Bandizip-解压缩工具"><a href="#Bandizip-解压缩工具" class="headerlink" title="Bandizip (解压缩工具)"></a><a href="https://www.bandisoft.com/bandizip/cn/" title="Bandizip">Bandizip (解压缩工具)</a></h3><p><code>中文</code> <code>免费</code></p><blockquote><p>Bandizip 是一款可靠、快速、免费的压缩软件，它支持 WinZip、7-Zip 和 WinRAR 以及其它压缩格式</p></blockquote><h3 id="ccleaner-垃圾文件、注册表清理"><a href="#ccleaner-垃圾文件、注册表清理" class="headerlink" title="ccleaner (垃圾文件、注册表清理)"></a><a href="https://www.piriform.com/ccleaner" title="ccleaner (垃圾文件、注册表清理)">ccleaner (垃圾文件、注册表清理)</a></h3><p><code>各种清理</code> <code>放心清理</code></p><blockquote><p>非常有名的垃圾文件清理工具，应该不用过多介绍，一般一两个月清理一次就可以了</p></blockquote><h3 id="Dism-windows实用工具合集"><a href="#Dism-windows实用工具合集" class="headerlink" title="Dism++ (windows实用工具合集)"></a><a href="https://www.chuyu.me/zh-Hans/" title="Dism++">Dism++ (windows实用工具合集)</a></h3><p><code>功能强大</code> <code>系统备份</code> <code>绿色软件</code> <code>开源</code></p><blockquote><p>用官网的话说: 一个不为利益、不跟风、不做作、单纯为执着与激情而生的小工具。安得广厦千万间，大庇天下寒士俱欢颜！</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Security整合CAS过程中，AuthenticationUserDetailsService失效的问题</title>
    <link href="/2017/08/10/Security%E6%95%B4%E5%90%88CAS%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8CAuthenticationUserDetailsService%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2017/08/10/Security%E6%95%B4%E5%90%88CAS%E8%BF%87%E7%A8%8B%E4%B8%AD%EF%BC%8CAuthenticationUserDetailsService%E5%A4%B1%E6%95%88%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>最近需要搭建单点登录环境，当在原有已整合了 spring security 的系统上对接 CAS 服务器时，发现实现了 AuthenticationUserDetailsService 接口的 CAS 用户信息加载服务无法生效（断点也无效），也不报错，奇怪的是，当独立搭建一套采用同等配置的 CAS client应用时，却是可以正常生效的。</p><h1 id="解决方式"><a href="#解决方式" class="headerlink" title="解决方式"></a>解决方式</h1><p>经过对系统中可能有影响到用户信息服务的配置进行一一排查，最终发现，导致这个问题的原因竟然是原有的自定义认证授权类，即使在认证配置中并没有将该配置进行注入，但是它还是影响到CAS认证服务的正常运行<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/145053900.png" alt="mark"></p><p><strong>因此，目前的有效解决方案为：</strong></p><p>方式一： 删除原有自定义验证类（<code>或取消对该类注册为Spring Bean</code>）<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/145250934.png" alt="mark"></p><p>方式二： 在认证配置中，取消调用<code>surper.configure(auth)</code>方法(不推荐)</p><blockquote><p>以上可有效解决提出的问题，但是具体导致原因有待进一步研究。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CAS</tag>
      
      <tag>spring security</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CAS server启动错误：java.lang.ClassNotFoundException: org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler</title>
    <link href="/2017/08/09/CAS-server%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF%EF%BC%9Ajava-lang-ClassNotFoundException-org-jasig-cas-adaptors-jdbc-QueryDatabaseAuthenticationHandler/"/>
    <url>/2017/08/09/CAS-server%E5%90%AF%E5%8A%A8%E9%94%99%E8%AF%AF%EF%BC%9Ajava-lang-ClassNotFoundException-org-jasig-cas-adaptors-jdbc-QueryDatabaseAuthenticationHandler/</url>
    
    <content type="html"><![CDATA[<h1 id="错误内容"><a href="#错误内容" class="headerlink" title="错误内容"></a>错误内容</h1><p>在配置 CAS 4.2.1 进行自定义的数据源（Mysql）验证配置时，出现如下错误：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="hljs-keyword">with</span> name &#x27;centralAuthenticationService&#x27; defined <span class="hljs-keyword">in</span> ServletContext resource <span class="hljs-literal">[<span class="hljs-operator">/</span>WEB-INF<span class="hljs-operator">/</span><span class="hljs-identifier">spring</span>-<span class="hljs-identifier">configuration</span><span class="hljs-operator">/</span><span class="hljs-identifier">applicationContext</span>.<span class="hljs-identifier">xml</span>]</span>: Cannot resolve reference <span class="hljs-keyword">to</span> bean &#x27;authenticationManager&#x27; <span class="hljs-keyword">while</span> setting constructor argument; nested <span class="hljs-keyword">exception</span> is org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="hljs-keyword">with</span> name &#x27;authenticationManager&#x27; defined <span class="hljs-keyword">in</span> ServletContext resource <span class="hljs-literal">[<span class="hljs-operator">/</span>WEB-INF<span class="hljs-operator">/</span><span class="hljs-identifier">deployerConfigContext</span>.<span class="hljs-identifier">xml</span>]</span>: Cannot resolve reference <span class="hljs-keyword">to</span> bean &#x27;dbAuthHandler&#x27; <span class="hljs-keyword">while</span> setting constructor argument; nested <span class="hljs-keyword">exception</span> is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find <span class="hljs-keyword">class</span> <span class="hljs-literal">[<span class="hljs-identifier">org</span>.<span class="hljs-identifier">jasig</span>.<span class="hljs-identifier">cas</span>.<span class="hljs-identifier">adaptors</span>.<span class="hljs-identifier">jdbc</span>.Q<span class="hljs-identifier">ueryDatabaseAuthenticationHandler</span>]</span> <span class="hljs-keyword">for</span> bean <span class="hljs-keyword">with</span> name &#x27;dbAuthHandler&#x27; defined <span class="hljs-keyword">in</span> ServletContext resource <span class="hljs-literal">[<span class="hljs-operator">/</span>WEB-INF<span class="hljs-operator">/</span><span class="hljs-identifier">deployerConfigContext</span>.<span class="hljs-identifier">xml</span>]</span>; nested <span class="hljs-keyword">exception</span> is java.lang.ClassNotFoundException: org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler<br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="hljs-constructor">Reference(BeanDefinitionValueResolver.<span class="hljs-params">java</span>:326)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="hljs-constructor">ValueIfNecessary(BeanDefinitionValueResolver.<span class="hljs-params">java</span>:107)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstructorResolver</span>.</span></span>resolve<span class="hljs-constructor">ConstructorArguments(ConstructorResolver.<span class="hljs-params">java</span>:623)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstructorResolver</span>.</span></span>autowire<span class="hljs-constructor">Constructor(ConstructorResolver.<span class="hljs-params">java</span>:148)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>autowire<span class="hljs-constructor">Constructor(AbstractAutowireCapableBeanFactory.<span class="hljs-params">java</span>:1075)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="hljs-constructor">BeanInstance(AbstractAutowireCapableBeanFactory.<span class="hljs-params">java</span>:979)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractAutowireCapableBeanFactory</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">CreateBean(AbstractAutowireCapableBeanFactory.<span class="hljs-params">java</span>:487)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="hljs-constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="hljs-params">java</span>:458)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractBeanFactory$1</span>.</span></span>get<span class="hljs-constructor">Object(AbstractBeanFactory.<span class="hljs-params">java</span>:296)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DefaultSingletonBeanRegistry</span>.</span></span>get<span class="hljs-constructor">Singleton(DefaultSingletonBeanRegistry.<span class="hljs-params">java</span>:223)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractBeanFactory</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">GetBean(AbstractBeanFactory.<span class="hljs-params">java</span>:293)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractBeanFactory</span>.</span></span>get<span class="hljs-constructor">Bean(AbstractBeanFactory.<span class="hljs-params">java</span>:194)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DefaultListableBeanFactory</span>.</span></span>pre<span class="hljs-constructor">InstantiateSingletons(DefaultListableBeanFactory.<span class="hljs-params">java</span>:628)</span><br>    at org.springframework.context.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractApplicationContext</span>.</span></span>finish<span class="hljs-constructor">BeanFactoryInitialization(AbstractApplicationContext.<span class="hljs-params">java</span>:932)</span><br>    at org.springframework.context.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractApplicationContext</span>.</span></span>refresh(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractApplicationContext</span>.</span></span>java:<span class="hljs-number">479</span>)<br>    at org.springframework.web.context.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContextLoader</span>.</span></span>configure<span class="hljs-constructor">AndRefreshWebApplicationContext(ContextLoader.<span class="hljs-params">java</span>:389)</span><br>    at org.springframework.web.context.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContextLoader</span>.</span></span>init<span class="hljs-constructor">WebApplicationContext(ContextLoader.<span class="hljs-params">java</span>:294)</span><br>    at org.springframework.web.context.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContextLoaderListener</span>.</span></span>context<span class="hljs-constructor">Initialized(ContextLoaderListener.<span class="hljs-params">java</span>:112)</span><br>    at org.jasig.cas.web.init.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">SafeContextLoaderListener</span>.</span></span>context<span class="hljs-constructor">Initialized(SafeContextLoaderListener.<span class="hljs-params">java</span>:75)</span><br>    at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardContext</span>.</span></span>listener<span class="hljs-constructor">Start(StandardContext.<span class="hljs-params">java</span>:5003)</span><br>    at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardContext</span>.</span></span>start<span class="hljs-constructor">Internal(StandardContext.<span class="hljs-params">java</span>:5517)</span><br>    at org.apache.catalina.util.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LifecycleBase</span>.</span></span>start(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">LifecycleBase</span>.</span></span>java:<span class="hljs-number">150</span>)<br>    at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContainerBase</span>.</span></span>add<span class="hljs-constructor">ChildInternal(ContainerBase.<span class="hljs-params">java</span>:901)</span><br>    at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ContainerBase</span>.</span></span>add<span class="hljs-constructor">Child(ContainerBase.<span class="hljs-params">java</span>:877)</span><br>    at org.apache.catalina.core.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">StandardHost</span>.</span></span>add<span class="hljs-constructor">Child(StandardHost.<span class="hljs-params">java</span>:652)</span><br>    at org.apache.catalina.startup.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HostConfig</span>.</span></span>deploy<span class="hljs-constructor">WAR(HostConfig.<span class="hljs-params">java</span>:1095)</span><br>    at org.apache.catalina.startup.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HostConfig$DeployWar</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">HostConfig</span>.</span></span>java:<span class="hljs-number">1960</span>)<br>    at java.util.concurrent.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors$RunnableAdapter</span>.</span></span>call(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Executors</span>.</span></span>java:<span class="hljs-number">511</span>)<br>    at java.util.concurrent.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FutureTask</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">FutureTask</span>.</span></span>java:<span class="hljs-number">266</span>)<br>    at java.util.concurrent.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadPoolExecutor</span>.</span></span>run<span class="hljs-constructor">Worker(ThreadPoolExecutor.<span class="hljs-params">java</span>:1142)</span><br>    at java.util.concurrent.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadPoolExecutor$Worker</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ThreadPoolExecutor</span>.</span></span>java:<span class="hljs-number">617</span>)<br>    at java.lang.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>run(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>java:<span class="hljs-number">745</span>)<br>Caused by: org.springframework.beans.factory.BeanCreationException: Error creating bean <span class="hljs-keyword">with</span> name &#x27;authenticationManager&#x27; defined <span class="hljs-keyword">in</span> ServletContext resource <span class="hljs-literal">[<span class="hljs-operator">/</span>WEB-INF<span class="hljs-operator">/</span><span class="hljs-identifier">deployerConfigContext</span>.<span class="hljs-identifier">xml</span>]</span>: Cannot resolve reference <span class="hljs-keyword">to</span> bean &#x27;dbAuthHandler&#x27; <span class="hljs-keyword">while</span> setting constructor argument; nested <span class="hljs-keyword">exception</span> is org.springframework.beans.factory.CannotLoadBeanClassException: Cannot find <span class="hljs-keyword">class</span> <span class="hljs-literal">[<span class="hljs-identifier">org</span>.<span class="hljs-identifier">jasig</span>.<span class="hljs-identifier">cas</span>.<span class="hljs-identifier">adaptors</span>.<span class="hljs-identifier">jdbc</span>.Q<span class="hljs-identifier">ueryDatabaseAuthenticationHandler</span>]</span> <span class="hljs-keyword">for</span> bean <span class="hljs-keyword">with</span> name &#x27;dbAuthHandler&#x27; defined <span class="hljs-keyword">in</span> ServletContext resource <span class="hljs-literal">[<span class="hljs-operator">/</span>WEB-INF<span class="hljs-operator">/</span><span class="hljs-identifier">deployerConfigContext</span>.<span class="hljs-identifier">xml</span>]</span>; nested <span class="hljs-keyword">exception</span> is java.lang.ClassNotFoundException: org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler<br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="hljs-constructor">Reference(BeanDefinitionValueResolver.<span class="hljs-params">java</span>:326)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="hljs-constructor">ValueIfNecessary(BeanDefinitionValueResolver.<span class="hljs-params">java</span>:107)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="hljs-constructor">ManagedMap(BeanDefinitionValueResolver.<span class="hljs-params">java</span>:375)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="hljs-constructor">ValueIfNecessary(BeanDefinitionValueResolver.<span class="hljs-params">java</span>:162)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstructorResolver</span>.</span></span>resolve<span class="hljs-constructor">ConstructorArguments(ConstructorResolver.<span class="hljs-params">java</span>:637)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">ConstructorResolver</span>.</span></span>autowire<span class="hljs-constructor">Constructor(ConstructorResolver.<span class="hljs-params">java</span>:148)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>autowire<span class="hljs-constructor">Constructor(AbstractAutowireCapableBeanFactory.<span class="hljs-params">java</span>:1075)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="hljs-constructor">BeanInstance(AbstractAutowireCapableBeanFactory.<span class="hljs-params">java</span>:979)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractAutowireCapableBeanFactory</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">CreateBean(AbstractAutowireCapableBeanFactory.<span class="hljs-params">java</span>:487)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractAutowireCapableBeanFactory</span>.</span></span>create<span class="hljs-constructor">Bean(AbstractAutowireCapableBeanFactory.<span class="hljs-params">java</span>:458)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractBeanFactory$1</span>.</span></span>get<span class="hljs-constructor">Object(AbstractBeanFactory.<span class="hljs-params">java</span>:296)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">DefaultSingletonBeanRegistry</span>.</span></span>get<span class="hljs-constructor">Singleton(DefaultSingletonBeanRegistry.<span class="hljs-params">java</span>:223)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractBeanFactory</span>.</span></span><span class="hljs-keyword">do</span><span class="hljs-constructor">GetBean(AbstractBeanFactory.<span class="hljs-params">java</span>:293)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">AbstractBeanFactory</span>.</span></span>get<span class="hljs-constructor">Bean(AbstractBeanFactory.<span class="hljs-params">java</span>:194)</span><br>    at org.springframework.beans.factory.support.<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">BeanDefinitionValueResolver</span>.</span></span>resolve<span class="hljs-constructor">Reference(BeanDefinitionValueResolver.<span class="hljs-params">java</span>:320)</span><span class="hljs-operator"></span><br><span class="hljs-operator">    ... </span><span class="hljs-number">31</span> more<br></code></pre></td></tr></table></figure><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>这是因为缺少数据连接包所导致的, 需要添加相关jar包（可以到<a href="https://mvnrepository.com/" title="Maven仓库">Maven中央仓库</a>寻找对应的jar）到 <code>tomcat目录\webapps\cas应用\WEB-INF\lib</code> 下：</p><ol><li><p>cas-server-support-jdbc-4.2.1.jar</p><blockquote><p>编译项目后，可以在 cas-4.2.1\cas-server-support-jdbc\build\libs\cas-server-support-jdbc-4.2.1.jar 找到</p></blockquote></li><li><p>mysql-connector-java-5.1.21.jar</p><blockquote><p>mysql驱动</p></blockquote></li><li><p>c3p0-0.9.1.2</p><blockquote><p>非必要，一般已存在</p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>SSO</tag>
      
      <tag>CAS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于Spring boot部署到独立Tomcat时，Servlet未能注入的问题</title>
    <link href="/2017/08/07/%E5%85%B3%E4%BA%8ESpring-boot%E9%83%A8%E7%BD%B2%E5%88%B0%E7%8B%AC%E7%AB%8BTomcat%E6%97%B6%EF%BC%8CServlet%E6%9C%AA%E8%83%BD%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <url>/2017/08/07/%E5%85%B3%E4%BA%8ESpring-boot%E9%83%A8%E7%BD%B2%E5%88%B0%E7%8B%AC%E7%AB%8BTomcat%E6%97%B6%EF%BC%8CServlet%E6%9C%AA%E8%83%BD%E6%B3%A8%E5%85%A5%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="前文"><a href="#前文" class="headerlink" title="前文"></a>前文</h1><p>在将 <code>spring boot</code> 应用<code>部署到独立的tomcat服务器时</code>，会因为<code>@ServletComponentScan注解不起作用</code>，从而导致以注解形式注入的监听器、过滤器以及 Servlet 注入失败（因为独立Tomcat采用的是容器内建的discovery机制），最终导致项目启动失败，为了避免这一情况，最好以 <code>@Bean</code> 的形式注册相关servlet</p><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><h2 id="注册-Session-监听器"><a href="#注册-Session-监听器" class="headerlink" title="注册 Session 监听器"></a>注册 Session 监听器</h2><blockquote><p>首先实现 HttpSessionListener 来定义一个 session 监听器，注意，这里将不再使用 @WebListener 注解</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//  @WebListener  // 因为需要在独立的tomcat中部署，所以改为采用ServletListenerRegistrationBean来注册监听器</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionHandler</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpSessionListener</span> </span>&#123;<br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> ILoginLogService loginLogService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionCreated</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;session created&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;session Destroyed&quot;</span>);<br>        UserDetailsBean user = (UserDetailsBean) httpSessionEvent.getSession().getAttribute(<span class="hljs-string">&quot;user-detail&quot;</span>);<br>        <span class="hljs-keyword">if</span> (user != <span class="hljs-keyword">null</span> &amp;&amp; loginLogService != <span class="hljs-keyword">null</span>) &#123;<br>            LoginLog lastLogByUserId = loginLogService.getLastLogByUserId(user.getId());<br>            lastLogByUserId.setLogoutTime(<span class="hljs-keyword">new</span> Date());<br>            loginLogService.update(lastLogByUserId);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>然后在一个配置类中对定义的监听器类进行注册</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> ServletListenerRegistrationBean <span class="hljs-title">sessionHandler</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="hljs-keyword">new</span> SessionHandler());<br>&#125;<br></code></pre></td></tr></table></figure><p>通过以上方式，可以有效解决 <code>@ServletComponentScan</code> 在独立容器中失效的问题</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tomcat</tag>
      
      <tag>spring boot</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>分享记录下喜欢的IDEA插件</title>
    <link href="/2017/07/21/%E5%88%86%E4%BA%AB%E8%AE%B0%E5%BD%95%E4%B8%8B%E5%96%9C%E6%AC%A2%E7%9A%84IDEA%E6%8F%92%E4%BB%B6/"/>
    <url>/2017/07/21/%E5%88%86%E4%BA%AB%E8%AE%B0%E5%BD%95%E4%B8%8B%E5%96%9C%E6%AC%A2%E7%9A%84IDEA%E6%8F%92%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="分享记录下喜欢的IDEA插件"><a href="#分享记录下喜欢的IDEA插件" class="headerlink" title="分享记录下喜欢的IDEA插件"></a>分享记录下喜欢的IDEA插件</h1><h2 id="提升效率"><a href="#提升效率" class="headerlink" title="提升效率"></a>提升效率</h2><h3 id="热部署"><a href="#热部署" class="headerlink" title="热部署"></a>热部署</h3><p><code>JRebel for IntelliJ</code></p><blockquote><p>热部署工具，可以在myJrebel注册获取永久免费版</p></blockquote><h3 id="Mybatis代码生成"><a href="#Mybatis代码生成" class="headerlink" title="Mybatis代码生成"></a>Mybatis代码生成</h3><p><code>MyBatisCodeHelper</code></p><blockquote><p>可根据Bean自动生成/更新 sql、Dao层、xml、Service，甚至可以根据Dao层接口的命名来生成xml代码,总之是MyBatis应用开发的一款神器</p></blockquote><h3 id="翻译（IntelliJ-产品通用）"><a href="#翻译（IntelliJ-产品通用）" class="headerlink" title="翻译（IntelliJ 产品通用）"></a>翻译（IntelliJ 产品通用）</h3><p><code>Translation</code></p><blockquote><p>轻松翻译各种词汇，支持驼峰式，下划线式等命名规则，很强</p></blockquote><h2 id="美化（IntelliJ-产品通用）"><a href="#美化（IntelliJ-产品通用）" class="headerlink" title="美化（IntelliJ 产品通用）"></a>美化（IntelliJ 产品通用）</h2><blockquote><p>Background Image Plus 更换IDEA背景，提升逼格~</p></blockquote><p><em>未完待续~ 您要是有好的插件欢迎评论分享哟</em></p>]]></content>
    
    
    <categories>
      
      <category>工具</category>
      
    </categories>
    
    
    <tags>
      
      <tag>IDEA</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Nginx反向代理的一次使用总结</title>
    <link href="/2017/07/19/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
    <url>/2017/07/19/Nginx%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E7%9A%84%E4%B8%80%E6%AC%A1%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>高性能的HTTP和反向代理服务器</p><h2 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h2><p><code>事件驱动</code> <code>高效的反向代理、负载平衡</code> <code>稳定</code> <code>丰富的模块库</code> <code>配置灵活</code> <code>低资源占用</code></p><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><blockquote><p>假设运行环境为<code>windows</code>且nginx所在目录为<code>D:\nginx-1.12.1</code></p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 启动服务（会有窗口一闪而过，可以正常访问`localhost:3000`则说明启动成功）</span><br>D:\nginx-1.12.1&gt; start nginx<br><span class="hljs-meta"></span><br><span class="hljs-meta">#</span><span class="bash"> 快速关闭Nginx，可能不保存相关信息，并迅速终止web服务</span><br>D:\nginx-1.12.1&gt; nginx -s stop<br><span class="hljs-meta">#</span><span class="bash"> 平稳关闭Nginx，保存相关信息，有安排的结束web服务</span><br>D:\nginx-1.12.1&gt; nginx -s quit<br><span class="hljs-meta">#</span><span class="bash"> 重新加载配置</span><br>D:\nginx-1.12.1&gt; nginx -s reload<br><span class="hljs-meta">#</span><span class="bash"> 不运行，仅测试有效的配置文件</span><br>D:\nginx-1.12.1&gt; nginx -t<br><span class="hljs-meta">#</span><span class="bash"> 显示 nginx 的版本</span><br>D:\nginx-1.12.1&gt; nginx -v<br><span class="hljs-meta">#</span><span class="bash"> 显示 nginx 的版本，编译器版本和配置参数</span><br>D:\nginx-1.12.1&gt; nginx -V<br></code></pre></td></tr></table></figure><h1 id="实际使用"><a href="#实际使用" class="headerlink" title="实际使用"></a>实际使用</h1><h2 id="使用反向代理来实现不同的域名访问同一台服务器上不同端口的web应用（隐藏端口号）"><a href="#使用反向代理来实现不同的域名访问同一台服务器上不同端口的web应用（隐藏端口号）" class="headerlink" title="使用反向代理来实现不同的域名访问同一台服务器上不同端口的web应用（隐藏端口号）"></a>使用反向代理来实现不同的域名访问同一台服务器上不同端口的web应用（隐藏端口号）</h2><p>应对当同一服务器上，同时存在多种类型的web服务器时（比如同时存在部署在tomcat上的应用以及nodeJs应用），避免需要采用端口号来区分不同的web应用</p><blockquote><p>核心配置文件为<code>conf/nginx.conf</code>,可以用<code>nginx -c</code>命令重新制定配置文件</p></blockquote><ol><li><p>为了尽量不污染原生配置，我们在conf目录下新建文件夹<code>myConf</code>,然后编辑<code>conf/nginx.conf</code>文件，在<code>http</code>配置末尾添加<code>include myConf/*.conf;</code>来导入我们自定义的配置文件。</p></li><li><p>在<code>myConf</code>中新建配置，如<code>test.conf</code>,填入配置信息如下：</p></li></ol><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">upstream</span> webServer01 &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:3001</span>;<br>    <span class="hljs-attribute">keepalive</span> <span class="hljs-number">64</span>;<br>&#125;<br><br><span class="hljs-attribute">upstream</span> webServer02 &#123;<br>    <span class="hljs-attribute">server</span> <span class="hljs-number">127.0.0.1:3002</span>;<br>    <span class="hljs-attribute">keepalive</span> <span class="hljs-number">64</span>;<br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.myApp01.com;<br>    <span class="hljs-comment">#access_log /var/log/nginx/test.log;</span><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP $remote_addr;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;<br>        <span class="hljs-attribute">proxy_set_header</span> Host  $http_host;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Nginx-Proxy <span class="hljs-literal">true</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-attribute">proxy_pass</span>       http://webServer01;<br><br>    &#125;<br><br>&#125;<br><br><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span> <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span> www.myApp02.com;<br>    <span class="hljs-comment">#access_log /var/log/nginx/test.log;</span><br>    <span class="hljs-attribute">location</span> / &#123;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Real-IP $remote_addr;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Forwarded-For $proxy_add_x_forwarded_for;<br>        <span class="hljs-attribute">proxy_set_header</span> Host  $http_host;<br>        <span class="hljs-attribute">proxy_set_header</span> X-Nginx-Proxy <span class="hljs-literal">true</span>;<br>        <span class="hljs-attribute">proxy_set_header</span> Connection <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-attribute">proxy_pass</span>       http://webServer02;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>修改配置文件后重新启动nginx服务，当我们以 <code>www.myApp01.com</code> 访问时，将进入<code>webServer01</code>，当我们以 <code>www.myApp02.com</code> 访问时，将进入<code>webServer02</code>,<br>当然，<code>前提</code>是<code>www.myApp01.com</code>和<code>www.myApp02.com</code>都是指向你本机IP地址的有效域名</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Nginx</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring boot中@WebListener、@WebFilter（也就是自定义servlet）不起作用的解决方案</title>
    <link href="/2017/07/03/spring-boot%E4%B8%AD@WebListener%E3%80%81@WebFilter%EF%BC%88%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89servlet%EF%BC%89%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2017/07/03/spring-boot%E4%B8%AD@WebListener%E3%80%81@WebFilter%EF%BC%88%E4%B9%9F%E5%B0%B1%E6%98%AF%E8%87%AA%E5%AE%9A%E4%B9%89servlet%EF%BC%89%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<blockquote><p>在Spring Boot中，当需要以注解的方式添加session监听器或其他servlet(包括监听器、过滤器、以及自定义的servlet)时，为了让其生效，还需要在配置类上添加<code>@ServletComponentScan</code>注解，该注解的作用是告诉spring boot,让其自动管理servlet，否则<code>注解方式注册的servlet不起作用</code></p></blockquote><ol><li>定义过滤器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> javax.servlet.*;<br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebFilter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 使用注解标注过滤器<span class="hljs-doctag">@WebFilter</span>将一个实现了javax.servlet.Filter接口的类定义为过滤器</span><br><span class="hljs-comment"> * filterName声明过滤器的名称（可选）</span><br><span class="hljs-comment"> * urlPatterns指定要过滤的URL模式,也可使用属性value来声明.(指定要过滤的URL模式是必选属性)</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Created by surpass.wei@gmail.com on 2017/2/24.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebFilter(filterName = &quot;myFilter&quot;, urlPatterns = &quot;/*&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Logger logger = LoggerFactory.getLogger(MyFilter.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">(FilterConfig filterConfig)</span> <span class="hljs-keyword">throws</span> ServletException </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;过滤器：myFilter &gt;&gt;&gt;&gt; 初始化&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;过滤器：myFilter &gt;&gt;&gt;&gt; 执行过滤操作&quot;</span>);<br>        filterChain.doFilter(servletRequest, servletResponse);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">destroy</span><span class="hljs-params">()</span> </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;过滤器：myFilter &gt;&gt;&gt;&gt; 销毁&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><ol start="2"><li>定义监听器</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> javax.servlet.annotation.WebListener;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionEvent;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpSessionListener;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * HttpSession监听器</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Created by surpass.wei@gmail.com on 2017/2/24.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@WebListener</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyHttpSessionListener</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">HttpSessionListener</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Logger logger = LoggerFactory.getLogger(MyHttpSessionListener.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionCreated</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;监听器：Session &gt;&gt;&gt;&gt; 创建&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sessionDestroyed</span><span class="hljs-params">(HttpSessionEvent httpSessionEvent)</span> </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;监听器：Session &gt;&gt;&gt;&gt; 销毁&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>自定义servlet</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServlet;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.PrintWriter;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 自定义Servlet</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Created by surpass.wei@gmail.com on 2017/2/24.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyServlet1</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">HttpServlet</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Logger logger = LoggerFactory.getLogger(MyServlet1.class);<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doGet</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;已执行：MyServlet1.doGet()&quot;</span>);<br>        doPost(req, resp);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doPost</span><span class="hljs-params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="hljs-keyword">throws</span> ServletException, IOException </span>&#123;<br>        logger.info(<span class="hljs-string">&quot;已执行：MyServlet1.doPost()&quot;</span>);<br>        resp.setContentType(<span class="hljs-string">&quot;text/html&quot;</span>);<br>        resp.setCharacterEncoding(<span class="hljs-string">&quot;UTF-8&quot;</span>); <span class="hljs-comment">//  设置编码，解决中文乱码问题</span><br><br>        PrintWriter out = resp.getWriter();<br>        out.println(<span class="hljs-string">&quot;&lt;html&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;head&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;title&gt;Hello World&lt;/title&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;/head&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;body&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;h1&gt;这是：MyServlet1&lt;/h1&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;/body&gt;&quot;</span>);<br>        out.println(<span class="hljs-string">&quot;&lt;/html&gt;&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="配置-ServletComponentScan以使以上servlet生效"><a href="#配置-ServletComponentScan以使以上servlet生效" class="headerlink" title="配置@ServletComponentScan以使以上servlet生效"></a>配置<code>@ServletComponentScan</code>以使以上servlet生效</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span><br><span class="hljs-meta">@ServletComponentScan</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicApp</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span></span>&#123;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ServletRegistrationBean <span class="hljs-title">myServlet1</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ServletRegistrationBean(<span class="hljs-keyword">new</span> MyServlet1(),<span class="hljs-string">&quot;/myServlet1/*&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(BasicApp.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>JAVA容器相关知识点整理</title>
    <link href="/2017/06/21/JAVA%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/"/>
    <url>/2017/06/21/JAVA%E5%AE%B9%E5%99%A8%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><ol><li>整理容器的基本知识</li><li>整理关于不同容器线程安全方面的知识</li></ol><h3 id="根据以下资料整理"><a href="#根据以下资料整理" class="headerlink" title="根据以下资料整理"></a>根据以下资料整理</h3><blockquote><p><a href="http://www.jianshu.com/p/047e33fdefd2">http://www.jianshu.com/p/047e33fdefd2</a><br><a href="http://blog.csdn.net/jiyiqinlovexx/article/details/51030720">http://blog.csdn.net/jiyiqinlovexx/article/details/51030720</a></p></blockquote><h3 id="常用容器关系图"><a href="#常用容器关系图" class="headerlink" title="常用容器关系图"></a>常用容器关系图</h3><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/160319389.png"></p><h4 id="快速了解"><a href="#快速了解" class="headerlink" title="快速了解"></a>快速了解</h4><hr><h5 id="Collection（接口）"><a href="#Collection（接口）" class="headerlink" title="Collection（接口）"></a>Collection（接口）</h5><ol><li>代表的是单个元素对象的序列，（可以有序/无序，可重复/不可重复 等，具体依据具体的子接口Set，List，Queue等）；</li><li>调用<code>toArray(T[] a)</code>可以转为数组</li><li>区别于<code>java.util.Collections</code>:<code>Collections</code>是一个正对于Conllection的工具类，提供了许多实用的静态方法</li></ol><h5 id="Map（接口）"><a href="#Map（接口）" class="headerlink" title="Map（接口）"></a>Map（接口）</h5><ol><li>代表的是“键值对”对象的集合（同样可以有序/无序 等依据具体实现）</li><li>提供了三种遍历方式：</li><li><code>Set&lt;K&gt; keySet()</code>: 返回所有key的Set集合</li><li><code>Collection&lt;V&gt; values()</code>: 返回所有values的集合</li><li><code>Set&lt; Map.Entry&lt; K, V&gt;&gt; entrySet()</code>： 是将整个Entry对象（也就是返回<code>键-值</code>形式的集合）作为元素返回所有的数据，这种方式比先通过<code>keySet()</code>获取所有key再根据key获取值效率要高</li></ol><hr><h5 id="List（Collection的子接口）"><a href="#List（Collection的子接口）" class="headerlink" title="List（Collection的子接口）"></a>List（Collection的子接口）</h5><ol><li>一个有序的Collection（或者叫做序列）。使用这个接口可以精确掌控元素的插入，还可以根据index获取相应位置的元素。</li><li>可重复</li><li>有顺序</li><li>提供了特殊的iterator遍历器，叫做<code>ListIterator</code>。这种遍历器允许遍历时插入，替换，删除，双向访问。 并且还有一个重载方法允许从一个指定位置开始遍历。</li></ol><h6 id="ArrayList（List接口的实现）"><a href="#ArrayList（List接口的实现）" class="headerlink" title="ArrayList（List接口的实现）"></a>ArrayList（List接口的实现）</h6><ol><li>ArrayList是一个实现了List接口的可变数组</li><li>可以插入null</li><li>它的size, isEmpty, get, set, iterator,add这些方法的时间复杂度是O(1),如果add n个数据则时间复杂度是O(n).</li><li>ArrayList不是synchronized的。</li></ol><h6 id="LinkedList（List接口的实现）"><a href="#LinkedList（List接口的实现）" class="headerlink" title="LinkedList（List接口的实现）"></a>LinkedList（List接口的实现）</h6><ol><li>LinkedList是一个链表维护的序列容器。和ArrayList都是序列容器，一个使用数组存储，一个使用链表存储。</li><li>数组和链表2种数据结构的对比：</li><li>查找方面。数组的效率更高，可以直接索引出查找，而链表必须从头查找。</li><li>插入删除方面。特别是在中间进行插入删除，这时候链表体现出了极大的便利性，只需要在插入或者删除的地方断掉链然后插入或者移除元素，然后再将前后链重新组装，但是数组必须重新复制一份将所有数据后移或者前移。</li><li>在内存申请方面，当数组达到初始的申请长度后，需要重新申请一个更大的数组然后把数据迁移过去才行（<code>所以当创建ArrayList，最好能给一个合理的初始大小</code>）。而链表只需要动态创建即可。</li><li>LinkedList还实现了Deque接口，Deque接口是继承Queue的。所以LinkedList还支持队列的pop，push，peek操作</li></ol><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/164101259.png" alt="mark"></p><h5 id="Set（Collection的子接口）"><a href="#Set（Collection的子接口）" class="headerlink" title="Set（Collection的子接口）"></a>Set（Collection的子接口）</h5><ol><li>存储不重复的元素集合</li></ol><h6 id="HashSet（Set接口的实现）"><a href="#HashSet（Set接口的实现）" class="headerlink" title="HashSet（Set接口的实现）"></a>HashSet（Set接口的实现）</h6><ol><li>基于HashMap进行存储（所以所有的add，remove等操作其实都是HashMap的add、remove操作。遍历操作其实就是HashMap的keySet的遍历）</li><li>不保证顺序，且不保证下次遍历的顺序和之前一样</li><li>允许null元素</li></ol><h6 id="LinkedHashSet（Set接口的实现）"><a href="#LinkedHashSet（Set接口的实现）" class="headerlink" title="LinkedHashSet（Set接口的实现）"></a>LinkedHashSet（Set接口的实现）</h6><ol><li>基于LinkedHashMap</li><li>相对于HashSet来说就是一个可以保持顺序的Set集合</li></ol><h6 id="TreeSet（Set接口的实现）"><a href="#TreeSet（Set接口的实现）" class="headerlink" title="TreeSet（Set接口的实现）"></a>TreeSet（Set接口的实现）</h6><ol><li>基于TreeMap</li><li>TreeSet内的元素必须实现Comparable接口</li><li>一组有次序的集合，如果没有指定排序规则Comparator，则会按照自然排序。（自然排序即e1.compareTo(e2) == 0作为比较）</li></ol><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/164140060.png" alt="mark"></p><h5 id="Queue（Collection的子接口）"><a href="#Queue（Collection的子接口）" class="headerlink" title="Queue（Collection的子接口）"></a>Queue（Collection的子接口）</h5><h5 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h5><h6 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h6><ol><li>最基础最常用的一种Map，它无序，以散列表的方式进行存储</li></ol><h6 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h6><ol><li>相对于HashMap来说区别是，LinkedHashMap遍历的时候具有顺序，可以保存插入的顺序，（还可以设置最近访问的元素也放在前面，即LRU）</li><li>其实LinkedHashMap的存储还是跟HashMap一样，采用哈希表方法存储，只不过LinkedHashMap多维护了一份head，tail链表。</li></ol><h6 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h6><ol><li>TreeMap平时用的不多，TreeMap会实现SortMap接口，定义一个排序规则，这样当遍历TreeMap的时候，会根据规定的排序规则返回元素。</li></ol><h6 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h6><ol><li>特点是，当除了自身有对key的引用外，此key没有其他引用那么此map会自动丢弃此值</li></ol><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/164740370.png" alt="mark"></p><blockquote><p>以上，感谢<a href="http://www.jianshu.com/p/047e33fdefd2">http://www.jianshu.com/p/047e33fdefd2</a> ，如有冒犯，请联系我删除</p></blockquote><hr><h4 id="关于容器的线程安全"><a href="#关于容器的线程安全" class="headerlink" title="关于容器的线程安全"></a>关于容器的线程安全</h4><h5 id="同步容器类"><a href="#同步容器类" class="headerlink" title="同步容器类"></a>同步容器类</h5><p>JDK1.0开始有两个很老的同步容器类：Vector和HashTable<br>JDK1.2之后Collections工具类中添加了一些工厂方法返回类似的同步封装器类：<br><code>Collections.synchronizedXXX(XXX xxx)</code></p><h6 id="实现方式："><a href="#实现方式：" class="headerlink" title="实现方式："></a>实现方式：</h6><blockquote><p>将它们的状态封装起来，并对每一个公有方法进行同步。<br>其中Vector就是Object[]+synchronized方法，Hashtable是HashtableEntry[]+synchronized方法。而synchronizedXXX()方法返回的同步封装器类更是简单地将传进来的Collection的所有方法封装为synchronized方法而已。</p></blockquote><h6 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h6><blockquote><ol><li>通过同步方法将访问操作串行化，导致并发环境下效率低下</li><li>复合操作（迭代、条件运算如没有则添加等）非线程安全，需要客户端代码来实现加锁。</li></ol></blockquote><h5 id="并发容器类"><a href="#并发容器类" class="headerlink" title="并发容器类"></a>并发容器类</h5><p>并发容器出现的最大的需求就是提升同步容器类的性能！<br>可以对比（非并发容器类）看看，将单线程版本和并发版本做一个比较。</p><h6 id="HashMap和HashSet的并发版本"><a href="#HashMap和HashSet的并发版本" class="headerlink" title="HashMap和HashSet的并发版本"></a>HashMap和HashSet的并发版本</h6><ol><li><p><code>ConcurrentHashMap&lt;K, V&gt;</code>（HashMap的并发版本）<br>版本：JDK5<br>目标：代替Hashtable、synchronizedMap，支持复合操作<br>原理：采用一种更加细粒度的加锁机制“分段锁”，任意数量读取线程可以并发读取，任意数量的读取线程和一个写线程可以并发访问，一定数量的写入线程可以并发访问。并发环境下ConcurrentHashMap带来了更高的吞吐量，而在单线程环境下只损失了很小的性能。</p></li><li><p><code>CopyOnWriteArraySet&lt;E&gt;</code>（HashSet的并发版本）<br>版本：JDK5<br>目标：代替synchronizedSet<br>原理：CopyOnWriteArraySet基于CopyOnWriteArrayList实现，其唯一的不同是在add时调用的是CopyOnWriteArrayList的addIfAbsent方法，其遍历当前Object数组，如Object数组中已有了当前元素，则直接返回，如果没有则放入Object数组的尾部，并返回。</p></li></ol><h6 id="TreeMap和TreeSet的并发版本"><a href="#TreeMap和TreeSet的并发版本" class="headerlink" title="TreeMap和TreeSet的并发版本"></a>TreeMap和TreeSet的并发版本</h6><ol><li><p><code>ConcurrentSkipListMap&lt;K, V&gt;</code>（TreeMap的并发版本）<br>版本：JDK6<br>目标：代替synchronizedSortedMap(TreeMap)<br>原理：Skip list（跳表）是一种可以代替平衡树的数据结构，默认是按照Key值升序的。Skip list让已排序的数据分布在多层链表中，以0-1随机数决定一个数据的向上攀升与否，通过”空间来换取时间”的一个算法。ConcurrentSkipListMap提供了一种线程安全的并发访问的排序映射表。内部是SkipList（跳表）结构实现，在理论上能够在O（log（n））时间内完成查找、插入、删除操作。</p></li><li><p><code>ConcurrentSkipListSet&lt;E&gt;</code>（TreeSet的并发版本）<br>版本：JDK6<br>目标：代替synchronizedSortedSet<br>原理：内部基于ConcurrentSkipListMap实现！</p></li></ol><h6 id="ArrayList和LinkedList的并发版本"><a href="#ArrayList和LinkedList的并发版本" class="headerlink" title="ArrayList和LinkedList的并发版本"></a>ArrayList和LinkedList的并发版本</h6><ol><li><p><code>CopyOnWriteArrayList&lt;E&gt;</code>（ArrayList的并发版本）<br>目标：代替Vector、synchronizedList<br>原理：CopyOnWriteArrayList的核心思想是利用高并发往往是读多写少的特性，对读操作不加锁，对写操作，先复制一份新的集合，在新的集合上面修改，然后将新集合赋值给旧的引用，并通过volatile 保证其可见性，当然写操作的锁是必不可少的了。</p></li><li><p><code>ConcurrentLinkedQueue&lt;E&gt;</code>（LinkedList的并发版本）<br>目标：代替Vector、synchronizedList<br>特点：基于链表实现的FIFO队列，特别注意单线程环境中LinkedList除了可以用作链表，也可用作队列，并发版本也一样</p></li></ol><h6 id="阻塞队列：BlockingQueue"><a href="#阻塞队列：BlockingQueue" class="headerlink" title="阻塞队列：BlockingQueue"></a>阻塞队列：BlockingQueue</h6><p>版本：JDK1.5<br>特点：拓展了Queue，增加了可阻塞的插入和获取等操作<br>实现类<br><code>LinkedBlockingQueue</code>：基于链表实现的可阻塞的FIFO队列<br><code>ArrayBlockingQueue</code>：基于数组实现的可阻塞的FIFO队列<br><code>PriorityBlockingQueue</code>：按优先级排序的队列<br>原理：通过ReentrantLock实现线程安全，通过Condition实现阻塞和唤醒。</p><blockquote><p>以上，感谢<a href="http://blog.csdn.net/jiyiqinlovexx/article/details/51030720">http://blog.csdn.net/jiyiqinlovexx/article/details/51030720</a> ，如有冒犯，请联系我删除</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql利用CONCAT函数批量清空表数据</title>
    <link href="/2017/06/19/mysql%E5%88%A9%E7%94%A8CONCAT%E5%87%BD%E6%95%B0%E6%89%B9%E9%87%8F%E6%B8%85%E7%A9%BA%E8%A1%A8%E6%95%B0%E6%8D%AE/"/>
    <url>/2017/06/19/mysql%E5%88%A9%E7%94%A8CONCAT%E5%87%BD%E6%95%B0%E6%89%B9%E9%87%8F%E6%B8%85%E7%A9%BA%E8%A1%A8%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><p>利用concat()拼接从information_schema读取出来的表信息，构建清除字符串SQL语句</p><h3 id="基本"><a href="#基本" class="headerlink" title="基本"></a>基本</h3><p><code>CONCAT(str1,str2,…)</code>：mysql函数，用于拼接字符串<br><code>information_schema</code>：读取表信息</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span><br>    CONCAT(<br>        <span class="hljs-string">&#x27;delete from &#x27;</span>,<br>        table_name,<br>        <span class="hljs-string">&#x27;;&#x27;</span><br>    )<br><span class="hljs-keyword">FROM</span><br>    information_schema. TABLES<br><span class="hljs-keyword">WHERE</span><br>    table_name <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;topic_%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>执行完将生成以”topic_”开头的所有表的清除语句，选择需要的粘贴到mysql命令行，即可达到批量清除表数据的目的（更多用法自己想象）；</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>mySql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Jrebel免费获取个人激活码</title>
    <link href="/2017/06/19/Jrebel%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E4%B8%AA%E4%BA%BA%E6%BF%80%E6%B4%BB%E7%A0%81/"/>
    <url>/2017/06/19/Jrebel%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96%E4%B8%AA%E4%BA%BA%E6%BF%80%E6%B4%BB%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h2 id="获取地址"><a href="#获取地址" class="headerlink" title="获取地址"></a>获取地址</h2><p><a href="https://my.jrebel.com/" title="官网网站">官网网站</a> </p><p>也可以直接搜索关键字<code>MyJrebel</code></p><ol><li> 使用facebook或Twitter登陆</li><li> 完善个人信息</li><li> 在 Install and Acticvate里面查看个人激活码</li></ol>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>String、StringBuffer以及StringBuilder</title>
    <link href="/2017/06/17/String%E3%80%81StringBuffer%E4%BB%A5%E5%8F%8AStringBuilder/"/>
    <url>/2017/06/17/String%E3%80%81StringBuffer%E4%BB%A5%E5%8F%8AStringBuilder/</url>
    
    <content type="html"><![CDATA[<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><blockquote><p>① 字符串是常量；它们的值在创建之后不能更改。<br>② Java 语言提供对字符串串联符号（”+”）以及将其他对象转换为字符串的特殊支持。字符串串联是通过 StringBuilder（或 StringBuffer）类及其 append 方法实现的。字符串转换是通过 toString 方法实现的。</p></blockquote><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><blockquote><p>① <code>线程安全</code>的可变字符序列。类似于 String 的字符串缓冲区，但不能修改。<br>② <code>StringBuffer</code> 上的主要操作是 <code>append</code> 和 <code>insert</code> 方法</p></blockquote><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><blockquote><p>① 一个可变的字符序列。但不保证同步。<br>② <code>StringBuffer</code> 的一个简易替换，用在字符串缓冲区被单个线程使用的时候（这种情况很普遍），建议优先采用该类，因为在它比 <code>StringBuffer</code> 要快。</p></blockquote><p><em>以上内容源于jdk1.6 API文档</em></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li><p>在实际开发中，由于String是不可变的，所以，为了避免内存资源的浪费以及从性能上考虑，所以建议<code>对于需要经常变动的字符串，采用StringBuffer或StringBuilder</code>，对于这二者的选择，<code>多线程操作使用StringBuffer，否则，优先使用StringBuilder</code>（处理速度更快），其实一般来说，基本都是用<code>StringBuilder</code></p></li><li><p>对于字符串的拼接，例如：<code>String str = &quot;a&quot;+&quot;b&quot;+&quot;c&quot;</code>，我们应该直接使用String,因为经过JVM的处理，它相当于<code>String str = &quot;abc&quot;</code>，而且，处理速度是比你自己创建StringBuffer一个一个append是要更加高效的。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
      <tag>原创</tag>
      
      <tag>学习笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>JAVA的类型转换</title>
    <link href="/2017/06/13/JAVA%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <url>/2017/06/13/JAVA%E7%9A%84%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="基本数据类型之间的转换（值转换）"><a href="#基本数据类型之间的转换（值转换）" class="headerlink" title="基本数据类型之间的转换（值转换）"></a>基本数据类型之间的转换（值转换）</h2><ol><li><p>boolean类型不可以和其他基本数据类型进行转换</p></li><li><p>整型，字符型，浮点型之间的转换遵行一下原则：</p><blockquote><ol><li>容量小的类型会自动转换成容量大的类型，类型由小到大：<br><code>byte,short,char&lt;int&lt;long&lt;float&lt;double</code><br>byte,shor,char之间不会转换，他们三者在计算时会转换为int型</li></ol></blockquote></li></ol><p><em><strong>PS：int型可以 直接（不能是多个(byte/short/char)相加后转换为了int的值（以后能不能看懂。。。。。。））赋值给byte,short,char型，但是不能超出他们的范围。</strong></em></p><blockquote><ol start="2"><li>容量大的类型在转换为容量小的类型时要加强制转换符，可能会造成精度降低或溢出，要 格外注意</li><li>不同数据类型在计算时会都先转换成里面最大的那种数据类型，然后计算</li></ol></blockquote><ol start="3"><li>实数常量：默认为double型<br>整型常量：默认为int型</li></ol><h2 id="引用数据类型之间的转换（引用转换）"><a href="#引用数据类型之间的转换（引用转换）" class="headerlink" title="引用数据类型之间的转换（引用转换）"></a>引用数据类型之间的转换（引用转换）</h2><ol><li><p>把一个Stirng类型表示的值转换成基本数据类型：<br><code>Integer.parseInt(Stirng s) </code><br><code>Double.parseDouble(String s)</code><br><code>Boolean.parseBoolean(String s)</code>等等（char有另外的方法）</p></li><li><p>把一个基本数据类型转换成String类型：<br><code>Interger.toString(int i)</code></p></li><li><p>由于JAVA的多态，子类可以隐式的转换为父类（其实也就是父类引用指向之类对象），这样的转换过后，父类的引用仍然可以通过强转转化为子类（子类原有的属性和方法不会丢失，因为子类对象在内存中并未发生变化），示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//父类强转回子类后，子类仍可以使用自身属性和方法</span><br>Father father = <span class="hljs-keyword">new</span> Son();<br>Son son = (Son)father;<br></code></pre></td></tr></table></figure></li><li><p>但是！父类直接强转为子类会报ClassCastException异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//会抛出ClassCastException异常</span><br>Father father = <span class="hljs-keyword">new</span>  Father();<br>Son son = (Son) father;<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>常见问题</tag>
      
      <tag>java</tag>
      
      <tag>原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Spring MVC日期时间参数的处理</title>
    <link href="/2017/06/08/Spring-MVC%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%8F%82%E6%95%B0%E7%9A%84%E5%A4%84%E7%90%86/"/>
    <url>/2017/06/08/Spring-MVC%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E5%8F%82%E6%95%B0%E7%9A%84%E5%A4%84%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h5 id="当Controller需要接收日期时间参数时，可以使用-DateTimeFormat注解，示例："><a href="#当Controller需要接收日期时间参数时，可以使用-DateTimeFormat注解，示例：" class="headerlink" title="当Controller需要接收日期时间参数时，可以使用@DateTimeFormat注解，示例："></a>当Controller需要接收日期时间参数时，可以使用<code>@DateTimeFormat</code>注解，示例：</h5><hr><p><strong>错误示例：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam</span> Date deadline<br></code></pre></td></tr></table></figure><p>如果直接使用<code>Date</code>接收，会报无法将String类型转化为Date类型的错误</p><p><strong>正确做法：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@RequestParam</span> <span class="hljs-meta">@DateTimeFormat(pattern = &quot;yyyy-MM-dd HH:mm&quot;)</span> Date deadline<br></code></pre></td></tr></table></figure><p>####当需要后台将日期数据格式化后传给前台时，则可以使用<code>@JsonFormat</code>注解，示例：</p><hr><p>在bean的属性值上面使用<code>@JsonFormat</code>，<code>pattern</code>指定格式，还可以用<code>timezone</code>指定时区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:ss&quot;, timezone = &quot;Asia/Shanghai&quot;)</span><br><span class="hljs-keyword">private</span> Date createTime;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring_mvc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>jQuery树组件-jstree使用</title>
    <link href="/2017/04/26/jQuery%E6%A0%91%E7%BB%84%E4%BB%B6-jstree%E4%BD%BF%E7%94%A8/"/>
    <url>/2017/04/26/jQuery%E6%A0%91%E7%BB%84%E4%BB%B6-jstree%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>jstree</code>是一个比较好用的，可定制化支持较好的一个jQuery树组件，最近项目里用到了它，但是发现网上的文档以及使用方式并不适合当前项目的实际开发，又或者是英文看起来比较复杂，因此对这次使用做出相关记录，以备不时之需。</p><blockquote><p>相关文档<br><a href="https://www.jstree.com/" title="官网">官网地址</a><br><a href="https://github.com/vakata/jstree" title="github">github 地址</a></p></blockquote><h3 id="实例代码"><a href="#实例代码" class="headerlink" title="实例代码"></a>实例代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 构建课程结构树</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">var</span> jsTreeComponent = &#123;<br>    <span class="hljs-attr">init</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">/*发起ajax请求*/</span><br>        $.getJSON(<span class="hljs-string">&#x27;/你后台获取树结构的api&#x27;</span>), <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">data</span>) </span>&#123;<br>            <span class="hljs-comment">/*这一块的逻辑根据自己的需求进行处理*/</span><br>            <span class="hljs-keyword">if</span> (data.success != <span class="hljs-literal">true</span>) &#123;<br>                $jsTree.html(<span class="hljs-string">&#x27;加载失败&#x27;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (data.data.structureList.length == <span class="hljs-number">0</span>) &#123;<br>                $jsTree.html(<span class="hljs-string">&#x27;暂无数据&#x27;</span>);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br>            <span class="hljs-keyword">var</span> structList = data.data.structureList;<br><br>            <span class="hljs-comment">/*以下是jstree所需对象的特定格式（如果是异步请求，那么是另外一种格式，这里就不多介绍了）*/</span><br>            <span class="hljs-keyword">var</span> jsTreeBean = &#123;<br>                <span class="hljs-attr">id</span>: <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-comment">// 必要的参数</span><br>                <span class="hljs-attr">parent</span>: <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-comment">// 必要的参数</span><br>                <span class="hljs-attr">text</span>: <span class="hljs-string">&quot;string&quot;</span>, <span class="hljs-comment">// 节点名称</span><br>                <span class="hljs-attr">icon</span>: <span class="hljs-string">&quot;glyphicon glyphicon-tag&quot;</span>, <span class="hljs-comment">// 图标，可使用自定义样式</span><br>                <span class="hljs-attr">state</span>: &#123;<br>                    <span class="hljs-attr">opened</span>: <span class="hljs-literal">true</span>,  <span class="hljs-comment">// 配置是否打开</span><br>                    <span class="hljs-attr">disabled</span>: <span class="hljs-literal">false</span>,  <span class="hljs-comment">// 配置是否不可选中</span><br>                    <span class="hljs-attr">selected</span>: <span class="hljs-literal">false</span>  <span class="hljs-comment">// 配置是否选中</span><br>                &#125;,<br>                <span class="hljs-attr">li_attr</span>: &#123;&#125;,  <span class="hljs-comment">// attributes for the generated LI node</span><br>                <span class="hljs-attr">a_attr</span>: &#123;&#125;  <span class="hljs-comment">// attributes for the generated A node</span><br>            &#125;;<br>            <span class="hljs-keyword">var</span> jsTreeBeanList = [];<br><br>            <span class="hljs-comment">/*根据后台返回来构建jsTreeBean对象，且填充到jsTreeBeanList数组*/</span><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; structList.length; i++) &#123;<br>                <span class="hljs-keyword">var</span> current = structList[i];<br>                <span class="hljs-keyword">var</span> newObj = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, jsTreeBean);<br><br>                newObj.id = current.id;<br>                newObj.text = current.name;<br>                newObj.cusLevel = current.level;    <span class="hljs-comment">//自定义的层级，0是章，1是节</span><br>                <span class="hljs-keyword">if</span> (current.level == <span class="hljs-number">0</span>) &#123;<br>                    newObj.icon = <span class="hljs-string">&#x27;glyphicon glyphicon-bookmark&#x27;</span>;<br>                    newObj.parent = <span class="hljs-string">&#x27;#&#x27;</span>;<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    newObj.parent = current.parentId;<br>                &#125;<br><br>                jsTreeBeanList.push(newObj);<br>            &#125;<br><br>            <span class="hljs-comment">/*核型配置类，用于使用构建好的数组生成树*/</span><br>            $jsTree.jstree(&#123;<br>                <span class="hljs-string">&#x27;core&#x27;</span>: &#123;<br>                    <span class="hljs-string">&#x27;check_callback&#x27;</span>: <span class="hljs-literal">true</span>,<br>                    <span class="hljs-string">&#x27;data&#x27;</span>: jsTreeBeanList<br>                &#125;<br>            &#125;);<br>        &#125;);<br>    &#125;,<br><br>    <span class="hljs-comment">/*事件对象*/</span><br>    <span class="hljs-attr">eventListener</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">/*监听&#x27;改选&#x27;这个事件，其他事件的监听参考官方文档*/</span><br>        $jsTree.on(<span class="hljs-string">&quot;changed.jstree&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">e, data</span>) </span>&#123;<br>            <span class="hljs-comment">/*如果点击的cusLevel是1（节），则获取学习资源*/</span><br>            <span class="hljs-keyword">if</span> (data.node.original.cusLevel == <span class="hljs-number">1</span>) &#123;<br>                service.loadLearnResources(data.node.id)<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>jQuery插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bootstrap table 基本使用</title>
    <link href="/2017/04/26/bootstrap-table-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2017/04/26/bootstrap-table-%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><code>bootstrap tabel</code>是基于 Bootstrap 的 jQuery 表格插件，通过简单的设置，就可以拥有强大的单选、多选、排序、分页，以及编辑、导出、过滤（扩展）等等的功能。</p><h3 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h3><ol><li>支持 Bootstrap 3 和 Bootstrap 2</li><li>自适应界面</li><li>固定表头</li><li>非常丰富的配置参数</li><li>直接通过标签使用</li><li>显示/隐藏列</li><li>显示/隐藏表头</li><li>通过 AJAX 获取 JSON 格式的数据</li><li>支持排序</li><li>格式化表格</li><li>支持单选或者多选</li><li>强大的分页功能</li><li>支持卡片视图</li><li>支持多语言</li><li>支持插件</li></ol><blockquote><p>相关文档<br><a href="http://bootstrap-table.wenzhixin.net.cn/zh-cn/documentation/" title="官方网站">官方网站</a></p></blockquote><h2 id="示例（后台分页，动态获取数据）"><a href="#示例（后台分页，动态获取数据）" class="headerlink" title="示例（后台分页，动态获取数据）"></a>示例（后台分页，动态获取数据）</h2><p><em>html部分</em></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 用来实例化表格的容器 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;example-table&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;table table-striped mb-none&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br></code></pre></td></tr></table></figure><p><em>js部分</em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$traineesTable.bootstrapTable(<span class="hljs-string">&#x27;destroy&#x27;</span>);<br>$traineesTable.bootstrapTable(&#123;<br>    <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/users/***&#x27;</span>,<br>    <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;GET&#x27;</span>,<br>    <span class="hljs-attr">dataType</span>: <span class="hljs-string">&#x27;json&#x27;</span>,<br>    <span class="hljs-attr">striped</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">pagination</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-attr">sidePagination</span>: <span class="hljs-string">&quot;server&quot;</span>,<br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 这是一个大坑！</span><br><span class="hljs-comment">     * 设置为undefined可以获取pageNumber，pageSize，searchText，sortName，sortOrder</span><br><span class="hljs-comment">     * 设置为limit可以获取limit, offset, search, sort, order</span><br><span class="hljs-comment">     * */</span><br>    <span class="hljs-attr">queryParamsType</span>: <span class="hljs-string">&quot;undefined&quot;</span>,<br>    <span class="hljs-attr">queryParams</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">params</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">currentPage</span>: params.pageNumber,   <span class="hljs-comment">//页码</span><br>            <span class="hljs-attr">pageSize</span>: params.pageSize,  <span class="hljs-comment">//页面大小</span><br>            <span class="hljs-attr">realName</span>: <span class="hljs-string">&#x27;abc&#x27;</span>  <span class="hljs-comment">// 自定义参数</span><br>        &#125;;<br>    &#125;,<br>    <span class="hljs-comment">//这里我查看源码的，在ajax请求成功后，发放数据之前可以对返回的数据进行处理，返回什么部分的数据，比如我的就需要进行整改的！</span><br>    <span class="hljs-attr">responseHandler</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">res</span>) </span>&#123;<br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-attr">total</span>: res.data.total,<br>            <span class="hljs-attr">rows</span>: res.data.traineeList<br>        &#125;;<br>    &#125;,<br>    <span class="hljs-attr">columns</span>: [&#123;<br>    <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;id&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;序号&#x27;</span>,<br>    <span class="hljs-attr">visible</span>: <span class="hljs-literal">false</span><br>    &#125;, &#123;<br>    <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;loginName&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;账号&#x27;</span><br>    &#125;, &#123;<br>    <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;realName&#x27;</span>,<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;姓名&#x27;</span><br>    &#125;, &#123;<br>    <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;操作&#x27;</span>,<br>    <span class="hljs-attr">field</span>: <span class="hljs-string">&#x27;realName&#x27;</span>,<br>    <span class="hljs-attr">align</span>: <span class="hljs-string">&#x27;center&#x27;</span>,<br>    <span class="hljs-attr">formatter</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">value, row, index</span>) </span>&#123;<br>    <span class="hljs-comment">// value： 默认的值</span><br>    <span class="hljs-comment">// row: 行对象</span><br>    <span class="hljs-comment">// index: 行序号，从0开始</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&#x27;这里是返回字符串&#x27;</span>;<br>    &#125;<br>    &#125;],<br>    <span class="hljs-attr">onLoadSuccess</span>: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-comment">// 当表格实例化成功后调用的函数</span><br>    &#125;<br>&#125;)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>原创</tag>
      
      <tag>jQuery插件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>bootstrap multiselect的refresh方法不起作用的解决方案</title>
    <link href="/2017/04/14/bootstrap-multiselect%E7%9A%84refresh%E6%96%B9%E6%B3%95%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2017/04/14/bootstrap-multiselect%E7%9A%84refresh%E6%96%B9%E6%B3%95%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<p><strong>最近做一个多级联动，使用的是<code>bootstrap-multiselect.js</code>，然而发现<code>$(&#39;#select1&#39;).multiselect(&#39;refresh&#39;)</code>并没有刷新选项，目前使用的方式是先使用<code>destroy</code>方法摧毁指定<code>select</code>元素再调用<code>refresh</code>方法来刷新，示例：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">$(<span class="hljs-string">&#x27;#select1&#x27;</span>).multiselect(<span class="hljs-string">&#x27;destroy&#x27;</span>).multiselect(<span class="hljs-string">&#x27;refresh&#x27;</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>bootstrap</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>div中连续英文和数字，自动换行的处理方式</title>
    <link href="/2017/04/10/div%E4%B8%AD%E8%BF%9E%E7%BB%AD%E8%8B%B1%E6%96%87%E5%92%8C%E6%95%B0%E5%AD%97%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/"/>
    <url>/2017/04/10/div%E4%B8%AD%E8%BF%9E%E7%BB%AD%E8%8B%B1%E6%96%87%E5%92%8C%E6%95%B0%E5%AD%97%EF%BC%8C%E8%87%AA%E5%8A%A8%E6%8D%A2%E8%A1%8C%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="连续的数字和英文字符不换行-对于div-p等块级元素"><a href="#连续的数字和英文字符不换行-对于div-p等块级元素" class="headerlink" title="连续的数字和英文字符不换行(对于div,p等块级元素)"></a>连续的数字和英文字符不换行(对于div,p等块级元素)</h2><h3 id="正常文字-亚洲文字和非亚洲文字"><a href="#正常文字-亚洲文字和非亚洲文字" class="headerlink" title="正常文字(亚洲文字和非亚洲文字)"></a>正常文字(亚洲文字和非亚洲文字)</h3><p>元素拥有默认的<code>white-space:normal</code>,当文本内容超出定义的宽度之后会自动换行</p><h3 id="连续的英文字符和阿拉伯数字"><a href="#连续的英文字符和阿拉伯数字" class="headerlink" title="连续的英文字符和阿拉伯数字"></a>连续的英文字符和阿拉伯数字</h3><p><strong>Chrome等常见</strong> ,可以使用<code>word-wrap : break-word</code> 或者 <code>word-break:break-all</code> 实现强制断行:</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#wrap</span>&#123;<span class="hljs-attribute">word-break</span>:break-all; <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;&#125;<br></code></pre></td></tr></table></figure><p>或者</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#wrap</span>&#123;<span class="hljs-attribute">word-wrap</span>:break-word; <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>;&#125;<br></code></pre></td></tr></table></figure><p><strong>个别不支持的浏览器</strong> 我们只有让超出边界的字符隐藏或者,给容器添加滚动条</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-id">#wrap</span>&#123;<span class="hljs-attribute">word-break</span>:break-all; <span class="hljs-attribute">width</span>:<span class="hljs-number">200px</span>; <span class="hljs-attribute">overflow</span>:auto;&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring mvc集成spring security</title>
    <link href="/2017/03/07/spring-mvc%E9%9B%86%E6%88%90spring-security/"/>
    <url>/2017/03/07/spring-mvc%E9%9B%86%E6%88%90spring-security/</url>
    
    <content type="html"><![CDATA[<h2 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h2><p><strong>总共涉及到<code>7个类文件</code>和添加<code>角色配置文件</code>以及需要在<code>web.xml</code>中添加一个过滤器（如果是spring boot的话则不需要配置web.xml）</strong></p><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/184149588.png" alt="mark"></p><hr><blockquote><p><strong>涉及文件及其作用简单分析</strong></p><ol><li><code>role-config.properties</code>：用来配置所有角色及所持权限信息</li><li><code>Role.java</code>:将配置文件中的权限信息分装到java类中，方便处理</li><li><code>RoleHandler.java</code>:构建Role对象列表，以便可以通过配置文件的key获取到相关Role对象</li><li>‘UserDtailsBean.java’:根绝具体业务需求来给用户对象添加（自定义）security需要的属性</li><li>‘UserDetailsServiceCustom’:自定义用户信息获取服务，主要是重写loadUserByUsername方法</li><li><code>AuthenticationProviderCustom.java</code>:自定义授权认证类，当用户登录，则会调用该方法，授权操作就是在这里进行的</li><li><code>CustomSuccessHandler</code>:当登录成功后的处理操作，可以省去或直接跳转到某个页面</li><li><code>SecurityConfig</code>:Security的核心配置类，在这里使用了自定义的AuthenticationProviderCustom和AuthenticationProviderCustom进行用户信息的构建以及授权类,具体配置内容可参考官网（当然，也可以用XML进行配置，而不是Java Config的形式）</li><li><code>web.xml</code>:配置security过滤器（使用spring boot的话无须配置）</li></ol></blockquote><hr><h3 id="具体代码案例"><a href="#具体代码案例" class="headerlink" title="具体代码案例"></a>具体代码案例</h3><p>1.在配置文件中配置好各个角色的信息，security会默认解析以<code>ROLE_</code>开头的权限内容作为角色，例如<code>ROLE_ADMIN</code>，则将作为<code>ADMIN</code>角色</p><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/185209507.png" alt="mark"></p><p>2.添加角色Bean对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Role</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String name;    <span class="hljs-comment">//  名称</span><br>    <span class="hljs-keyword">private</span> List&lt;String&gt; privileges;    <span class="hljs-comment">//  分配的角色/权限</span><br><br>    Role()&#123;<br><br>    &#125;<br><br>    Role(String name, List&lt;String&gt; privileges)&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>        <span class="hljs-keyword">this</span>.privileges = privileges;<br>    &#125;<br><br>    <span class="hljs-function">List&lt;String&gt; <span class="hljs-title">getPrivileges</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.privileges;<br>    &#125;<br><br>    <span class="hljs-function">String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>3.提供角色权限初始化类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.x.x.common.UserType;<br><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Value;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 角色权限管理以及初始化</span><br><span class="hljs-comment"> * 目前是读取配置文件来初始化用户权限</span><br><span class="hljs-comment"> * &lt;p&gt;</span><br><span class="hljs-comment"> * Created by surpass.wei@gmail.com on 2017/3/6.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RoleHandler</span> </span>&#123;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;role.admin&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String adminRoleStr;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;role.teacher&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String teacherRoleStr;<br><br>    <span class="hljs-meta">@Value(&quot;$&#123;role.trainee&#125;&quot;)</span><br>    <span class="hljs-keyword">private</span> String traineeRoleStr;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> List&lt;Role&gt; roleList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 根据config.properties配置文件中的角色权限控制来初始化roles</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">init</span><span class="hljs-params">()</span> </span>&#123;<br>        UserType[] userTypes = UserType.values();<br><br>        Role role;<br>        List&lt;String&gt; privilegeList;<br>        <span class="hljs-comment">/**</span><br><span class="hljs-comment">         * 循环角色类型获取相应的配置字符串，根据“,”分隔</span><br><span class="hljs-comment">         * 构建Role的List</span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">for</span> (UserType userType : userTypes) &#123;<br><br>            String currentRoleStr;  <span class="hljs-comment">//  当前角色的权限信息</span><br>            <span class="hljs-keyword">if</span> (userType.equals(UserType.ADMIN)) &#123;<br>                currentRoleStr = adminRoleStr;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (userType.equals(UserType.TEACHER)) &#123;<br>                currentRoleStr = teacherRoleStr;<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (userType.equals(UserType.TRAINEE)) &#123;<br>                currentRoleStr = traineeRoleStr;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (currentRoleStr.isEmpty()) &#123;<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            privilegeList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            String[] roleArr = currentRoleStr.split(<span class="hljs-string">&quot;,&quot;</span>);<br>            <span class="hljs-keyword">for</span> (String s : roleArr) &#123;<br>                privilegeList.add(s.trim());<br>            &#125;<br>            role = <span class="hljs-keyword">new</span> Role(userType.getRoleName(), privilegeList);<br><br>            roleList.add(role);<br>        &#125;<br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Role <span class="hljs-title">getRole</span><span class="hljs-params">(String roleName)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (roleList.isEmpty()) &#123;<br>            <span class="hljs-keyword">this</span>.init();<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (roleName == <span class="hljs-keyword">null</span> || roleName.isEmpty()) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        Role role = <span class="hljs-keyword">new</span> Role();<br>        <span class="hljs-keyword">for</span> (Role temp_role : roleList) &#123;<br>            <span class="hljs-keyword">if</span> (temp_role.getName().compareToIgnoreCase(roleName) == <span class="hljs-number">0</span>) &#123;<br>                role = temp_role;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> role;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.封装UserDetailBean</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.x.x.common.UserType;<br><span class="hljs-keyword">import</span> com.x.x.entity.User;<br><span class="hljs-keyword">import</span> com.x.x.util.BeanUtil;<br><span class="hljs-keyword">import</span> com.x.x.util.SpringContextUtil;<br><span class="hljs-keyword">import</span> org.springframework.security.core.GrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.authority.SimpleGrantedAuthority;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Collection;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 基于User包装一个UserDetailsBean(用于security权限认证)</span><br><span class="hljs-comment"> * 主要为了实现 getAuthorities()</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDetailsBean</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">User</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetails</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">UserDetailsBean</span><span class="hljs-params">(User user)</span> </span>&#123;<br>        BeanUtil.copyObjValue(user, <span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Collection&lt;? extends GrantedAuthority&gt; getAuthorities() &#123;<br>        <span class="hljs-comment">//  获取用户的角色/权限信息</span><br><br>        Collection&lt;SimpleGrantedAuthority&gt; authorities = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        RoleHandler roleHandler = SpringContextUtil.getApplicationContext().getBean(RoleHandler.class);<br><br>        <span class="hljs-keyword">if</span> (roleHandler == <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">// 根据用户的类型, 构建用户对应的Role</span><br>        String roleName;<br><br>        roleName = UserType.getRoleName(<span class="hljs-keyword">this</span>.getUserType());<br>        Role role = roleHandler.getRole(roleName);<br><br>        <span class="hljs-comment">//  循环角色的权限信息, 构建authorities</span><br>        <span class="hljs-keyword">for</span> (String privilege : role.getPrivileges()) &#123;<br>            authorities.add(<span class="hljs-keyword">new</span> SimpleGrantedAuthority(privilege));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> authorities;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getPassword</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getPwd();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getUsername</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getLoginName();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonExpired</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//  账户是否未过期</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAccountNonLocked</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//  账户是否未锁定</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.getUserState() == <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isCredentialsNonExpired</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">// 凭证是否未过期</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isEnabled</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-comment">//  是否有效</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.实现UserDetailsService重写loadUserByUsername方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.x.x.entity.User;<br><span class="hljs-keyword">import</span> com.x.x.service.IUserService;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetails;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UsernameNotFoundException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 重写loadUserByUsername</span><br><span class="hljs-comment"> * Created by surpass.wei@gmail.com on 2016/12/16.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserDetailsServiceCustom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">UserDetailsService</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Logger logger = LoggerFactory.getLogger(UserDetailsServiceCustom.class);<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> UserDetails <span class="hljs-title">loadUserByUsername</span><span class="hljs-params">(String username)</span> <span class="hljs-keyword">throws</span> UsernameNotFoundException </span>&#123;<br><br>        UserDetailsBean userDetailsBean;<br><br>        User search = <span class="hljs-keyword">new</span> User();<br>        search.setLoginName(username);<br>        User user = userService.findOneByEntity(search);<br><br>        <span class="hljs-keyword">if</span> (user==<span class="hljs-keyword">null</span>) &#123;<br>            logger.warn(<span class="hljs-string">&quot;该用户不存在：&quot;</span> + username);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> UsernameNotFoundException(<span class="hljs-string">&quot;该用户不存在：&quot;</span> + username);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            userDetailsBean = <span class="hljs-keyword">new</span> UserDetailsBean(user);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> userDetailsBean;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>6.自定义的授权认证类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.x.x.entity.User;<br><span class="hljs-keyword">import</span> com.x.x.service.IUserService;<br><span class="hljs-keyword">import</span> org.slf4j.Logger;<br><span class="hljs-keyword">import</span> org.slf4j.LoggerFactory;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationProvider;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.BadCredentialsException;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.UsernamePasswordAuthenticationToken;<br><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.core.AuthenticationException;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthenticationProviderCustom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">AuthenticationProvider</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Logger logger = LoggerFactory.getLogger(AuthenticationProviderCustom.class);<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> IUserService userService;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Authentication <span class="hljs-title">authenticate</span><span class="hljs-params">(Authentication authentication)</span> <span class="hljs-keyword">throws</span> AuthenticationException </span>&#123;<br>        UsernamePasswordAuthenticationToken token = (UsernamePasswordAuthenticationToken) authentication;<br>        String loginName = token.getName();<br>        String password = token.getCredentials().toString();<br>        User user = userService.getUserByLoginNameAndPwd(loginName, password);<br><br>        UserDetailsBean userDetailsBean;<br>        <span class="hljs-keyword">if</span>(user != <span class="hljs-keyword">null</span>) &#123;<br>            userDetailsBean = <span class="hljs-keyword">new</span> UserDetailsBean(user);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            logger.error(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> BadCredentialsException(<span class="hljs-string">&quot;用户名或密码错误&quot;</span>);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UsernamePasswordAuthenticationToken(userDetailsBean, password, userDetailsBean.getAuthorities());<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">supports</span><span class="hljs-params">(Class&lt;?&gt; aClass)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>7.配置Security</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.beans.factory.annotation.Autowired;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Bean;<br><span class="hljs-keyword">import</span> org.springframework.context.annotation.Configuration;<br><span class="hljs-keyword">import</span> org.springframework.security.authentication.AuthenticationProvider;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.builders.HttpSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;<br><span class="hljs-keyword">import</span> org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;<br><span class="hljs-keyword">import</span> org.springframework.security.core.userdetails.UserDetailsService;<br><br><span class="hljs-keyword">import</span> javax.annotation.Resource;<br><br><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-meta">@EnableGlobalMethodSecurity(prePostEnabled = true)</span><br><span class="hljs-meta">@EnableWebSecurity</span> <span class="hljs-comment">//这里如果放开js文件将不被允许执行，注释掉也没有影响，不知道为什么</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SecurityConfig</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebSecurityConfigurerAdapter</span> </span>&#123;<br><br>    <span class="hljs-meta">@Resource</span><br>    <span class="hljs-keyword">private</span> CustomSuccessHandler customSuccessHandler;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configure</span><span class="hljs-params">(HttpSecurity http)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        http.authorizeRequests()<br>                .antMatchers(<span class="hljs-string">&quot;/**&quot;</span>).permitAll()<br>                <span class="hljs-comment">//.antMatchers(&quot;/static/**&quot;).permitAll()  //  允许所有用户对根路径以及匹配&quot;/static/&quot;开头的路径的访问</span><br>                <span class="hljs-comment">//.antMatchers(&quot;/&quot;, &quot;/index&quot;).hasRole(&quot;TEACHER&quot;)</span><br>                .anyRequest().authenticated()   <span class="hljs-comment">//  任何尚未匹配的的URL地址只需要对用户进行权限验证</span><br>                .and()<br>                .formLogin()<br>                    .successHandler(customSuccessHandler)<br>                    .failureUrl(<span class="hljs-string">&quot;/login?error=true&quot;</span>)<br>                    <span class="hljs-comment">//.defaultSuccessUrl(&quot;/home&quot;)</span><br>                    <span class="hljs-comment">//.defaultSuccessUrl(&quot;/swagger-ui.html&quot;)  //  登陆成功后默认默认跳转到swagger页</span><br>                    .permitAll()<br>                    .and()<br>                    .rememberMe().tokenValiditySeconds(<span class="hljs-number">604800</span>);<br>        http.logout();<br>        http.csrf().disable();<br>    &#125;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configureGlobal</span><span class="hljs-params">(AuthenticationManagerBuilder auth)</span> <span class="hljs-keyword">throws</span> Exception </span>&#123;<br>        <span class="hljs-comment">//  将验证过程交给自定义的授权认证类</span><br>        auth.authenticationProvider(authenticationProvider());<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> UserDetailsService <span class="hljs-title">userDetailsService</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> UserDetailsServiceCustom();<br>    &#125;<br><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> AuthenticationProvider <span class="hljs-title">authenticationProvider</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> AuthenticationProviderCustom();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>8.自定义成功处理类(<code>可选</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.springframework.security.core.Authentication;<br><span class="hljs-keyword">import</span> org.springframework.security.web.DefaultRedirectStrategy;<br><span class="hljs-keyword">import</span> org.springframework.security.web.RedirectStrategy;<br><span class="hljs-keyword">import</span> org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;<br><span class="hljs-keyword">import</span> org.springframework.stereotype.Component;<br><br><span class="hljs-keyword">import</span> javax.servlet.ServletException;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletResponse;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><br><span class="hljs-meta">@Component</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CustomSuccessHandler</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleUrlAuthenticationSuccessHandler</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> RedirectStrategy redirectStrategy = <span class="hljs-keyword">new</span> DefaultRedirectStrategy();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">handle</span><span class="hljs-params">(HttpServletRequest request, HttpServletResponse response,</span></span><br><span class="hljs-params"><span class="hljs-function">                          Authentication authentication)</span> <span class="hljs-keyword">throws</span> IOException, ServletException </span>&#123;<br>        UserDetailsBean user = (UserDetailsBean) authentication.getPrincipal();<br><br>        String targetUrl;<br><br>        <span class="hljs-keyword">if</span> (UserType.ADMIN.getValue().equals(user.getUserType())) &#123;<br>            targetUrl = <span class="hljs-string">&quot;/swagger-ui.html&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (UserType.TEACHER.getValue().equals(user.getUserType())) &#123;<br>            targetUrl = <span class="hljs-string">&quot;/teacher&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (UserType.TRAINEE.getValue().equals(user.getUserType()))&#123;<br>            targetUrl = <span class="hljs-string">&quot;/trainee&quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            targetUrl = <span class="hljs-string">&quot;/login?error&quot;</span>;<br>        &#125;<br><br>        redirectStrategy.sendRedirect(request, response, targetUrl);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>9.添加security过滤器</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--spring security--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">filter</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="hljs-tag">&lt;/<span class="hljs-name">filter-class</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">filter-mapping</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">filter-name</span>&gt;</span>springSecurityFilterChain<span class="hljs-tag">&lt;/<span class="hljs-name">filter-name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">url-pattern</span>&gt;</span>/*<span class="hljs-tag">&lt;/<span class="hljs-name">url-pattern</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">filter-mapping</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>spring boot1.5以上版本@ConfigurationProperties取消location注解后的替代方案</title>
    <link href="/2017/02/24/spring-boot1.5%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC@ConfigurationProperties%E5%8F%96%E6%B6%88location%E6%B3%A8%E8%A7%A3%E5%90%8E%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/"/>
    <url>/2017/02/24/spring-boot1.5%E4%BB%A5%E4%B8%8A%E7%89%88%E6%9C%AC@ConfigurationProperties%E5%8F%96%E6%B6%88location%E6%B3%A8%E8%A7%A3%E5%90%8E%E7%9A%84%E6%9B%BF%E4%BB%A3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在<code>spring boot（版本1.5.1.RELEASE）</code>项目中，当准备映射自定义的配置文件属性到类中的时候，发现原本的<code>@ConfigurationProperties</code>注解已将<code>location</code>属性移除，因此导致无法正常给配置类的属性赋值(spring boot这么做其实也有他的道理，具体可参考<a href="https://github.com/spring-projects/spring-boot/issues/6726">https://github.com/spring-projects/spring-boot/issues/6726</a>)</p><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/174335562.png" alt="mark"></p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><blockquote><p>之前一直采用的方式是添加<code>@ConfigurationProperties</code>注解，配置其<code>prefix</code>和<code>location</code>属性，然后在spring boot启动类中用<code>@EnableConfigurationProperties</code>激活配置类</p></blockquote><p><strong>既然不行了，那我们只能换一种方式：</strong></p><ol><li>在<code>@EnableConfigurationProperties</code>取消激活自定义的配置类（<strong>重要</strong>）</li><li>在配置类中采用<code>@Component</code>的方式注册为组件，然后使用<code>@PropertySource</code>来指定自定义的资源目录<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/175202035.png" alt="mark"></li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这就是<code>@ConfigurationProperties</code>的<code>location</code>属性被取消后的一种替代方案,当然，如果想改代码，也有其他的解决方案，可以参考<a href="http://stackoverflow.com/questions/42083276/spring-boot-remove-locations-attributes-from-configurationproperties">http://stackoverflow.com/questions/42083276/spring-boot-remove-locations-attributes-from-configurationproperties</a></p><p>当然，spring boot认为将一个配置类绑定到一个配置文件是一件不好的事，因此，我们也应当尽可能的去理解他的思想，然后找到一个最有效的方式来解决这个问题。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot使用FastJson解析JSON数据</title>
    <link href="/2017/02/21/Spring-Boot%E4%BD%BF%E7%94%A8FastJson%E8%A7%A3%E6%9E%90JSON%E6%95%B0%E6%8D%AE/"/>
    <url>/2017/02/21/Spring-Boot%E4%BD%BF%E7%94%A8FastJson%E8%A7%A3%E6%9E%90JSON%E6%95%B0%E6%8D%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="1-引入fastjson依赖库："><a href="#1-引入fastjson依赖库：" class="headerlink" title="1.引入fastjson依赖库："></a>1.引入fastjson依赖库：</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--添加fastjson解析JSON数据--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.alibaba<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>fastjson<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.16<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="2-配置fastjson"><a href="#2-配置fastjson" class="headerlink" title="2.配置fastjson"></a>2.配置fastjson</h2><blockquote><p>这里要说下很重要的话，官方文档说的1.2.10以后，会有两个方法支持HttpMessageconvert，一个是FastJsonHttpMessageConverter，支持4.2以下的版本，一个是FastJsonHttpMessageConverter4支持4.2以上的版本，具体有什么区别暂时没有深入研究。这里也就是说：低版本的就不支持了，所以这里最低要求就是1.2.10+</p></blockquote><h3 id="方式一："><a href="#方式一：" class="headerlink" title="方式一："></a>方式一：</h3><ul><li><p>（1）启动类继承WebMvcConfigurerAdapter</p></li><li><p>（2）覆盖方法configureMessageConverters</p></li></ul><p>具体代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">//  申明让spring boot自动给程序进行必要的配置，等价于以默认属性使用@Configuration，@EnableAutoConfiguration和@ComponentScan</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">WebMvcConfigurerAdapter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">configureMessageConverters</span><span class="hljs-params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.configureMessageConverters(converters);<br><br>        <span class="hljs-comment">//  初始化转换器</span><br>        FastJsonHttpMessageConverter fastConvert = <span class="hljs-keyword">new</span> FastJsonHttpMessageConverter();<br>        <span class="hljs-comment">//  初始化一个转换器配置</span><br>        FastJsonConfig fastJsonConfig = <span class="hljs-keyword">new</span> FastJsonConfig();<br>        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);<br>        <span class="hljs-comment">//  将配置设置给转换器并添加到HttpMessageConverter转换器列表中</span><br>        fastConvert.setFastJsonConfig(fastJsonConfig);<br><br>        converters.add(fastConvert);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SpringApplication.run(Application.class, args);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="方式二："><a href="#方式二：" class="headerlink" title="方式二："></a>方式二：</h3><ul><li>在配置类或启动类中，注入Bean : HttpMessageConverters<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Bean配置管理</span><br><span class="hljs-comment"> * Created by surpass.wei@gmail.com on 2017/2/21.</span><br><span class="hljs-comment"> */</span><br><span class="hljs-meta">@Configuration</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BeanConfig</span> </span>&#123;<br><br>    <span class="hljs-comment">/*注入Bean : HttpMessageConverters，以支持fastjson*/</span><br>    <span class="hljs-meta">@Bean</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> HttpMessageConverters <span class="hljs-title">fastJsonHttpMessageConverters</span><span class="hljs-params">()</span> </span>&#123;<br>        FastJsonHttpMessageConverter fastConvert = <span class="hljs-keyword">new</span> FastJsonHttpMessageConverter();<br>        FastJsonConfig fastJsonConfig = <span class="hljs-keyword">new</span> FastJsonConfig();<br>        fastJsonConfig.setSerializerFeatures(SerializerFeature.PrettyFormat);<br>        fastConvert.setFastJsonConfig(fastJsonConfig);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HttpMessageConverters((HttpMessageConverter&lt;?&gt;) fastConvert);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><hr><p>配置完成后，在实体类中使用<code>@JSONField(serialize=false)</code>，是不是此字段就不返回了，如果是的话，那么恭喜你配置成功了，其中JSONField的包路径是：<code>com.alibaba.fastjson.annotation.JSONField</code></p><blockquote><p>【转】根据 <a href="http://412887952-qq-com.iteye.com/blog/2315202">http://412887952-qq-com.iteye.com/blog/2315202</a> 实践整理</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Tomcat下部署应用的三种方式</title>
    <link href="/2017/02/20/Tomcat%E4%B8%8B%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <url>/2017/02/20/Tomcat%E4%B8%8B%E9%83%A8%E7%BD%B2%E5%BA%94%E7%94%A8%E7%9A%84%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要将<code>Servlet/JSP应用程序</code>部署到<code>Tomcat</code>时，需要显示或者隐式的定义一个<code>Tomcat Context</code>，每一个<code>Tomcat Context</code>都代表一个web应用程序。</p><h3 id="显式定义有两种方式"><a href="#显式定义有两种方式" class="headerlink" title="显式定义有两种方式"></a>显式定义有两种方式</h3><ul><li><p>在Tomcat的<code>conf/Catalina/localhost</code>目录下创建一个XML文件，文件名很重要，因为他就是Context路径名,例如以下应用程序的访问地址就是：</p></li><li><p><code>http://localhost:8080/test</code>*</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- test.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;C:/apps/test&quot;</span> <span class="hljs-attr">reloadable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p><code>docBase</code>是里面唯一必要的属性，用来定义应用程序的位置。<br><code>reloadable</code>属性是可选的，如果为true，那么只要应用程序中Java类文件或其他资源有任何增删改，那么Tomcat都会侦测到，然后会重新加载应用程序，一般在只开发测试期间建议这么做。<br>当把该XML文件（也就是<code>Tomcat Context定义文件</code>）添加到指定目录时，Tomcat就会自动加载应用程序，删除该XML文件时，Tomcat就会自动卸载该应用程序。</p></li><li><p>另一种方式是在<code>conf/server.xml</code>文件中找到<code>Host</code>元素，然后在其下创建一个Context子元素，与前一种方式不同的地方在于这种配置方式需要定义path属性，例如：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">Context</span> <span class="hljs-attr">path</span>=<span class="hljs-string">&quot;/test&quot;</span> <span class="hljs-attr">docBase</span>=<span class="hljs-string">&quot;C:/apps/test&quot;</span> <span class="hljs-attr">reloadable</span>=<span class="hljs-string">&quot;true&quot;</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般来说不建议通过<code>server.xml</code>来管理Context，因为当修改了server.xml文件后，需要重启Tomcat才能生效</p></li></ul><h3 id="隐式部署的方式-一般用得最多"><a href="#隐式部署的方式-一般用得最多" class="headerlink" title="隐式部署的方式(一般用得最多)"></a>隐式部署的方式(一般用得最多)</h3><ul><li>通过将一个war文件或者整个应用程序复制到Tomcat的webapps目录下即可</li></ul><h3 id="更多配置可参考"><a href="#更多配置可参考" class="headerlink" title="更多配置可参考"></a>更多配置可参考</h3><p><a href="http://tomcat.apache.org/tomcat-8.0-doc/config/context.html" title="Tomcat8 Context详细配置方式">Tomcat8 Context详细配置方式</a></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>tomcat</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring mvc中的转发与重定向</title>
    <link href="/2017/02/18/spring-mvc%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/"/>
    <url>/2017/02/18/spring-mvc%E4%B8%AD%E7%9A%84%E8%BD%AC%E5%8F%91%E4%B8%8E%E9%87%8D%E5%AE%9A%E5%90%91/</url>
    
    <content type="html"><![CDATA[<h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h2><ol><li> <code>转发</code>比<code>重定向</code>快</li><li> <code>重定向</code>经过客户端</li><li> 若需要转到一个外部网站，只能使用<code>重定向</code></li><li> <code>重定向</code>可以避免用户重新加载页面时再次发起请求</li><li> <code>转发</code>只有一次请求，而<code>重定向</code>实际是两次请求</li></ol><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><span id="more"></span><p><code>转发</code>就好比你拿着请假条去找班长请假，班长知道这应该找班主任，所以就拿着你的申请去找班主任，然后签好字给你了，而<code>重定向</code>就比较懒了，他只告诉你，这该找班主任，然后你就得自己再自个去找班主任了</p><h2 id="使用spring-3的Flash属性让重定向传值"><a href="#使用spring-3的Flash属性让重定向传值" class="headerlink" title="使用spring 3的Flash属性让重定向传值"></a>使用spring 3的Flash属性让重定向传值</h2><p>我们知道由于重定向经过客户端，所以参数会在重定向的过程中丢失，但是在spring 3版本及以上，我们可以通过Flash属性进行传值，方法：</p><ol><li> spring mvc配置开启<code>&amp;lt;annotation-driven/&amp;gt;</code></li><li> 在Controller方法上添加<code>org.springframework.web.servlet.mvc.supportRedirectAttributes</code>参数</li></ol><p>示例：</p><pre class="prettyprint linenums prettyprinted">1.  `<span class="lit">@RequestMapping</span><span class="pun">(</span><span class="str">"/test"</span><span class="pun">)</span>`2.  `<span class="kwd">public</span><span class="pln"> </span><span class="typ">String</span><span class="pln"> test</span><span class="pun">(</span><span class="typ">RedirectAttributes</span><span class="pln"> redirectAttributes</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span>`3.  `<span class="pln">        redirectAttributes</span><span class="pun">.</span><span class="pln">addFlashAttribute</span><span class="pun">(</span><span class="str">"test"</span><span class="pun">,</span><span class="pln"> </span><span class="str">"msg"</span><span class="pun">);</span>`4.  `<span class="pln">        </span><span class="kwd">return</span><span class="pln"> </span><span class="str">"redirect:/test2"</span><span class="pun">;</span>`5.  `<span class="pun">}</span>`</pre>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>spring_mvc</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>spring security无法获取到用户信息</title>
    <link href="/2017/02/17/spring-security%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E5%88%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/"/>
    <url>/2017/02/17/spring-security%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E5%88%B0%E7%94%A8%E6%88%B7%E4%BF%A1%E6%81%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="spring-securit无法获取到用户信息"><a href="#spring-securit无法获取到用户信息" class="headerlink" title="spring securit无法获取到用户信息"></a>spring securit无法获取到用户信息</h1><p>最近在前后端对接的工程中，对于前端请求，后端<code>Controller</code>总是无法获取到用户信息（可以成功登陆，且成功登陆后台测试页面的测试请求是可以正常接收到用户信息的），折腾了两三天，总算找到了<strong>原因</strong>：</p><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/160428857.png" alt="mark"></p><span id="more"></span><p>cookie（主要是cookie中的<code>JSESESSIONID(也就是session id)</code>值）没有正常被返回，具体导致原因为一下两点： </p><p>1.前端采用fetch异步请求，问题就在这里，fetch方式的请求默认是不带cookie的，因此，需要配置<code>credentials: &#39;include&#39;</code>或其他附带cookie的值。</p><p>2.前后端分离（存在前端服务器），在这种情况下，cookie被返回到了前端自己的服务器，而没能正常的返回到后端服务器，因此，需要前端服务器将cookie值转发给后端。</p><p>以上两个问题解决了，后端终于可以正常的拿到用户信息了，开心:yum:。</p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>windows下图床神器（结合markdown和七牛）</title>
    <link href="/2017/01/14/windows%E4%B8%8B%E5%9B%BE%E5%BA%8A%E7%A5%9E%E5%99%A8%EF%BC%88%E7%BB%93%E5%90%88markdown%E5%92%8C%E4%B8%83%E7%89%9B%EF%BC%89/"/>
    <url>/2017/01/14/windows%E4%B8%8B%E5%9B%BE%E5%BA%8A%E7%A5%9E%E5%99%A8%EF%BC%88%E7%BB%93%E5%90%88markdown%E5%92%8C%E4%B8%83%E7%89%9B%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p><code>markdown</code>是一种很不错的轻量级标记语言，实现了样式与内容的分离，通过简单的语法学习就能够帮助我们写出一片优雅的博客。<br>但是不得不说，在markdown中贴图片确实是件挺烦的事，当然了，这篇教程就是教大家如何在windows环境下，优雅的处理markdown图片引用，目的如下：</p><blockquote><ul><li>第三方图片存储服务托管我们的图片文件</li><li>windows环境下实现<code>截图</code>、<code>复制</code>、<code>拖动</code>图片后自动上传目标图片并返回可直接粘贴的符合<code>markdown</code>语法的图片引用</li></ul></blockquote><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>注册七牛云</p><blockquote><p><code>注册地址</code>：<a href="https://portal.qiniu.com/signup?code=3l8figtn4k11u" title="点我注册">点我注册</a><br><code>采用原因</code>：免费、空间大小以及月流量充足（具体自行了解）、稳定可靠、专业、以及强大的图片处理功能（比如可以通过URL来控制图片的大小）</p></blockquote></li><li><p>下载mpic(图床神器)</p><blockquote><p><code>官方地址</code>：<a href="http://mpic.lzhaofu.cn/" title="点我进入官网">点我进入官网</a><br><code>采用原因</code>：截图上传、拖动上传、复制上传、上传记录均已实现</p></blockquote></li></ol><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol><li>点击上面的注册地址进入注册页选择个人用户进行注册</li><li>完成实名认证（非必须，不过完成后可以获得更大的存贮空间以及月流量）</li><li>设置mpic<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/190026791.png" alt="mark"></li></ol><blockquote><p>这些设置信息在哪找到？</p></blockquote><p><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/191540574.png" alt="mark"></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>markdown</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>@Aspects（AOP）对Spring MVC中Controller不起作用的原因及解决方案</title>
    <link href="/2017/01/11/@Aspects%EF%BC%88AOP%EF%BC%89%E5%AF%B9Spring-MVC%E4%B8%ADController%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <url>/2017/01/11/@Aspects%EF%BC%88AOP%EF%BC%89%E5%AF%B9Spring-MVC%E4%B8%ADController%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    
    <content type="html"><![CDATA[<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>Spring MVC加载的是<code>WebApplicationContext</code>而不是<code>ApplicationContext</code>，也就是说spring和springMvc使用的是不同的容器，如果只在spring的配置文件中配置了<code>&lt;aop:aspectj-autoproxy/&gt;</code>，那么AOP是不能正常在controller中起到作用的，因此需要把该配置同样配置到springMvc的配置文件中。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>1.在<code>web.xml</code>中找到当前使用的spring MVC的配置文件位置<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/091543806.png" alt="mark"></p><p>2.找到springMvc的配置文件，添加配置Aspectj的自动代理（许多造成该错误的原因都是因为只在spring的配置文件中配置了aspectj的支持）<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/095310263.png" alt="mark"></p>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Spring</tag>
      
      <tag>常见问题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Linux修改主机名</title>
    <link href="/2017/01/08/Linux%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D/"/>
    <url>/2017/01/08/Linux%E4%BF%AE%E6%94%B9%E4%B8%BB%E6%9C%BA%E5%90%8D/</url>
    
    <content type="html"><![CDATA[<ol><li>修改主机名<br><code>vim /etc/hostname</code></li><li>配置hosts文件<br><code>vim /etc/hosts</code></li></ol>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>防止maven更新依赖后Language level改为1.5</title>
    <link href="/2017/01/07/%E9%98%B2%E6%AD%A2maven%E6%9B%B4%E6%96%B0%E4%BE%9D%E8%B5%96%E5%90%8ELanguage-level%E6%94%B9%E4%B8%BA1.5/"/>
    <url>/2017/01/07/%E9%98%B2%E6%AD%A2maven%E6%9B%B4%E6%96%B0%E4%BE%9D%E8%B5%96%E5%90%8ELanguage-level%E6%94%B9%E4%B8%BA1.5/</url>
    
    <content type="html"><![CDATA[<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>在IDEA下开发maven项目，经常在修改POM文件后，编译器的Language level自动改为了1.5，每次都要改回1.8，很麻烦</p><hr><h1 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h1><p>是Maven插件没有配置最新的Java编译器</p><hr><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在<code>pom.xml</code>的<code>project</code>节点下，添加（这里是设置Language level为1.8）：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">properties</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.source</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.source</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">maven.compiler.target</span>&gt;</span>1.8<span class="hljs-tag">&lt;/<span class="hljs-name">maven.compiler.target</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">properties</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>maven</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>UEFI模式下win10装Ubuntu16.04双系统</title>
    <link href="/2017/01/07/UEFI%E6%A8%A1%E5%BC%8F%E4%B8%8Bwin10%E8%A3%85Ubuntu16.04%E5%8F%8C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2017/01/07/UEFI%E6%A8%A1%E5%BC%8F%E4%B8%8Bwin10%E8%A3%85Ubuntu16.04%E5%8F%8C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="简单粗暴的流程："><a href="#简单粗暴的流程：" class="headerlink" title="简单粗暴的流程："></a>简单粗暴的流程：</h4><ol><li>下载Ubuntu16.04.iso镜像</li><li>使用<code>rufus-2.11.exe</code>制作Ubuntu系统安装启动盘（UEFI模式下应该直接吧镜像解压到U盘中就可以，它会自动找到efi文件，不过没试过）</li><li>在win10磁盘管理中压缩一个现有磁盘或直接删除一个磁盘，反正目的就是制造一个可用空间或未分配的空间</li><li><code>关闭win10的快速启动</code>以及<code>关闭secure boot</code></li><li>关机，插上U盘，进入boot，选择U盘启动</li><li>选地区时间什么的就不说了，主要是安装类型要选择“其他选项”，因为我们的目的是把系统装到windows盘符以外的盘中。</li><li>最重要的是分区步骤（<code>UEFI模式下会和传统模式有不同的地方（这是个大坑）</code>）<ol><li>找到准备好的设备（磁盘,设备名应该叫空闲（语言选择中文的前提下），否则就是步骤③不到位）</li><li>一下是我的分区情况<br><img src="https://surpass-blog.oss-cn-shanghai.aliyuncs.com/151722804.png" alt="mark"></li></ol></li><li>重启，一切顺利的话应该可以见到一个紫色的界面用来选择启动哪个系统（默认会是Ubuntu，当然，选择带有windows字样的就是启动win10了）</li><li>当然你也可以自己管理引导，但是在win10下，UEFI管理引导不是用EasyBCD（很多地方提到这个软件，但是，值得注意的是UEFI模式是不支持该软件的！），而是用EasyUEFI(当然，也会有别的软件，但是注意，一定要是支持UEFI的，否则找了也没用)，不管理引导的话，可能导致删除ubuntu系统后，也进去win10了，所以最好还是在win10下装一个比较好。</li></ol><h4 id="总结：单独就装上Ubuntu来说，其实是不麻烦的，主要是要搞清楚你电脑的引导模式，然后“对症下药”，在安装过程中注意好Ubuntu的分区（步骤⑥）基本就没什么大问题。"><a href="#总结：单独就装上Ubuntu来说，其实是不麻烦的，主要是要搞清楚你电脑的引导模式，然后“对症下药”，在安装过程中注意好Ubuntu的分区（步骤⑥）基本就没什么大问题。" class="headerlink" title="总结：单独就装上Ubuntu来说，其实是不麻烦的，主要是要搞清楚你电脑的引导模式，然后“对症下药”，在安装过程中注意好Ubuntu的分区（步骤⑥）基本就没什么大问题。"></a>总结：单独就装上Ubuntu来说，其实是不麻烦的，主要是要搞清楚你电脑的引导模式，然后“对症下药”，在安装过程中注意好Ubuntu的分区（步骤⑥）基本就没什么大问题。</h4>]]></content>
    
    
    <categories>
      
      <category>开发</category>
      
    </categories>
    
    
    <tags>
      
      <tag>linux</tag>
      
      <tag>windows</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
